!function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=1)}([function(t,e,n){var r,i;(function(){var n,o,a,s,l,h,u,c,f,d,p,m,v;t.exports=0;a="hasOwnProperty",s=/[\.\/]/,l=/\s*,\s*/,h=function(t,e){return t-e},u={n:{}},c=function(){for(var t=0,e=this.length;t<e;t++)if(void 0!==this[t])return this[t]},f=function(){for(var t=this.length;--t;)if(void 0!==this[t])return this[t]},d=Object.prototype.toString,p=String,m=Array.isArray||function(t){return t instanceof Array||"[object Array]"==d.call(t)},eve=function(t,e){var r,i=o,a=Array.prototype.slice.call(arguments,2),s=eve.listeners(t),l=0,u=[],d={},p=[],g=n;p.firstDefined=c,p.lastDefined=f,n=t,o=0;for(var m=0,v=s.length;m<v;m++)"zIndex"in s[m]&&(u.push(s[m].zIndex),s[m].zIndex<0&&(d[s[m].zIndex]=s[m]));for(u.sort(h);u[l]<0;)if(r=d[u[l++]],p.push(r.apply(e,a)),o)return o=i,p;for(m=0;m<v;m++)if("zIndex"in(r=s[m]))if(r.zIndex==u[l]){if(p.push(r.apply(e,a)),o)break;do{if((r=d[u[++l]])&&p.push(r.apply(e,a)),o)break}while(r)}else d[r.zIndex]=r;else if(p.push(r.apply(e,a)),o)break;return o=i,n=g,p},eve._events=u,eve.listeners=function(t){var e,n,r,i,o,a,l,h,c=m(t)?t:t.split(s),f=u,d=[f],p=[];for(i=0,o=c.length;i<o;i++){for(h=[],a=0,l=d.length;a<l;a++)for(n=[(f=d[a].n)[c[i]],f["*"]],r=2;r--;)(e=n[r])&&(h.push(e),p=p.concat(e.f||[]));d=h}return p},eve.separator=function(t){t?(t="["+(t=p(t).replace(/(?=[\.\^\]\[\-])/g,"\\"))+"]",s=new RegExp(t)):s=/[\.\/]/},eve.on=function(t,e){if("function"!=typeof e)return function(){};for(var n=m(t)?m(t[0])?t:[t]:p(t).split(l),r=0,i=n.length;r<i;r++)!function(t){for(var n,r=m(t)?t:p(t).split(s),i=u,o=0,a=r.length;o<a;o++)i=(i=i.n).hasOwnProperty(r[o])&&i[r[o]]||(i[r[o]]={n:{}});for(i.f=i.f||[],o=0,a=i.f.length;o<a;o++)if(i.f[o]==e){n=!0;break}!n&&i.f.push(e)}(n[r]);return function(t){+t==+t&&(e.zIndex=+t)}},eve.f=function(t){var e=[].slice.call(arguments,1);return function(){eve.apply(null,[t,null].concat(e).concat([].slice.call(arguments,0)))}},eve.stop=function(){o=1},eve.nt=function(t){var e=m(n)?n.join("."):n;return t?new RegExp("(?:\\.|\\/|^)"+t+"(?:\\.|\\/|$)").test(e):e},eve.nts=function(){return m(n)?n:n.split(s)},eve.off=eve.unbind=function(t,e){if(t){var n=m(t)?m(t[0])?t:[t]:p(t).split(l);if(n.length>1)for(var r=0,i=n.length;r<i;r++)eve.off(n[r],e);else{n=m(t)?t:p(t).split(s);var o,h,c,f,d,g=[u],v=[];for(r=0,i=n.length;r<i;r++)for(f=0;f<g.length;f+=c.length-2){if(c=[f,1],o=g[f].n,"*"!=n[r])o[n[r]]&&(c.push(o[n[r]]),v.unshift({n:o,name:n[r]}));else for(h in o)o[a](h)&&(c.push(o[h]),v.unshift({n:o,name:h}));g.splice.apply(g,c)}for(r=0,i=g.length;r<i;r++)for(o=g[r];o.n;){if(e){if(o.f){for(f=0,d=o.f.length;f<d;f++)if(o.f[f]==e){o.f.splice(f,1);break}!o.f.length&&delete o.f}for(h in o.n)if(o.n[a](h)&&o.n[h].f){var y=o.n[h].f;for(f=0,d=y.length;f<d;f++)if(y[f]==e){y.splice(f,1);break}!y.length&&delete o.n[h].f}}else for(h in delete o.f,o.n)o.n[a](h)&&o.n[h].f&&delete o.n[h].f;o=o.n}t:for(r=0,i=v.length;r<i;r++){for(h in(o=v[r]).n[o.name].f)continue t;for(h in o.n[o.name].n)continue t;delete o.n[o.name]}}}else eve._events=u={n:{}}},eve.once=function(t,e){var n=function(){return eve.off(t,n),e.apply(this,arguments)};return eve.on(t,n)},eve.version="0.5.0",eve.toString=function(){return"You are running Eve 0.5.0"},t.exports?t.exports=eve:r=function(){return eve}.apply(e,[]),v=window||this,void 0===(i=function(t){return function(t,e){var n=function(e){var n,r={},i=t.requestAnimationFrame||t.webkitRequestAnimationFrame||t.mozRequestAnimationFrame||t.oRequestAnimationFrame||t.msRequestAnimationFrame||function(t){return setTimeout(t,16,(new Date).getTime()),!0},o=Array.isArray||function(t){return t instanceof Array||"[object Array]"==Object.prototype.toString.call(t)},a=0,s="M"+(+new Date).toString(36),l=Date.now||function(){return+new Date},h=function(t){var e=this;if(null==t)return e.s;var n=e.s-t;e.b+=e.dur*n,e.B+=e.dur*n,e.s=t},u=function(t){if(null==t)return this.spd;this.spd=t},c=function(t){var e=this;if(null==t)return e.dur;e.s=e.s*t/e.dur,e.dur=t},f=function(){var t=this;delete r[t.id],t.update(),e("mina.stop."+t.id,t)},d=function(){var t=this;t.pdif||(delete r[t.id],t.update(),t.pdif=t.get()-t.b)},p=function(){var t=this;t.pdif&&(t.b=t.get()-t.pdif,delete t.pdif,r[t.id]=t,m())},g=function(){var t,e=this;if(o(e.start)){t=[];for(var n=0,r=e.start.length;n<r;n++)t[n]=+e.start[n]+(e.end[n]-e.start[n])*e.easing(e.s)}else t=+e.start+(e.end-e.start)*e.easing(e.s);e.set(t)},m=function(t){if(t){var o=0;for(var a in r)if(r.hasOwnProperty(a)){var s=r[a],l=s.get();o++,s.s=(l-s.b)/(s.dur/s.spd),s.s>=1&&(delete r[a],s.s=1,o--,function(t){setTimeout((function(){e("mina.finish."+t.id,t)}))}(s)),s.update()}n=!!o&&i(m)}else n||(n=i(m))},v=function(t,e,n,i,o,l,y){var x={id:s+(a++).toString(36),start:t,end:e,b:n,s:0,dur:i-n,spd:1,get:o,set:l,easing:y||v.linear,status:h,speed:u,duration:c,stop:f,pause:d,resume:p,update:g};r[x.id]=x;var b,F=0;for(b in r)if(r.hasOwnProperty(b)&&2==++F)break;return 1==F&&m(),x};return v.time=l,v.getById=function(t){return r[t]||null},v.linear=function(t){return t},v.easeout=function(t){return Math.pow(t,1.7)},v.easein=function(t){return Math.pow(t,.48)},v.easeinout=function(t){if(1==t)return 1;if(0==t)return 0;var e=.48-t/1.04,n=Math.sqrt(.1734+e*e),r=n-e,i=-n-e,o=Math.pow(Math.abs(r),1/3)*(r<0?-1:1)+Math.pow(Math.abs(i),1/3)*(i<0?-1:1)+.5;return 3*(1-o)*o*o+o*o*o},v.backin=function(t){if(1==t)return 1;var e=1.70158;return t*t*((e+1)*t-e)},v.backout=function(t){if(0==t)return 0;var e=1.70158;return(t-=1)*t*((e+1)*t+e)+1},v.elastic=function(t){return t==!!t?t:Math.pow(2,-10*t)*Math.sin((t-.075)*(2*Math.PI)/.3)+1},v.bounce=function(t){var e=7.5625,n=2.75;return t<1/n?e*t*t:t<2/n?e*(t-=1.5/n)*t+.75:t<2.5/n?e*(t-=2.25/n)*t+.9375:e*(t-=2.625/n)*t+.984375},t.mina=v,v}(void 0===e?function(){}:e),r=function(t){function n(t,e){if(t){if(t.nodeType)return H(t);if(M(t,"array")&&n.set)return n.set.apply(n,t);if(t instanceof R)return t;if(null==e)return H(t=r.doc.querySelector(String(t)))}return new U(t=null==t?"100%":t,e=null==e?"100%":e)}n.version="0.5.1",n.toString=function(){return"Snap v"+this.version},n._={};var r={win:t.window,doc:t.window.document};n._.glob=r;var i,o,a="hasOwnProperty",s=String,l=parseFloat,h=parseInt,u=Math,c=u.max,f=u.min,d=u.abs,p=(u.pow,u.PI),m=(u.round,Object.prototype.toString),v=/^\s*((#[a-f\d]{6})|(#[a-f\d]{3})|rgba?\(\s*([\d\.]+%?\s*,\s*[\d\.]+%?\s*,\s*[\d\.]+%?(?:\s*,\s*[\d\.]+%?)?)\s*\)|hsba?\(\s*([\d\.]+(?:deg|\xb0|%)?\s*,\s*[\d\.]+%?\s*,\s*[\d\.]+(?:%?\s*,\s*[\d\.]+)?%?)\s*\)|hsla?\(\s*([\d\.]+(?:deg|\xb0|%)?\s*,\s*[\d\.]+%?\s*,\s*[\d\.]+(?:%?\s*,\s*[\d\.]+)?%?)\s*\))\s*$/i,y=(n._.separator=/[,\s]+/,/[\s]*,[\s]*/),x={hs:1,rg:1},b=/([a-z])[\s,]*((-?\d*\.?\d*(?:e[\-+]?\d+)?[\s]*,?[\s]*)+)/gi,F=/([rstm])[\s,]*((-?\d*\.?\d*(?:e[\-+]?\d+)?[\s]*,?[\s]*)+)/gi,w=/(-?\d*\.?\d*(?:e[\-+]?\d+)?)[\s]*,?[\s]*/gi,C=0,k="S"+(+new Date).toString(36),S=function(t){return(t&&t.type?t.type:"")+k+(C++).toString(36)},E="http://www.w3.org/1999/xlink",B="http://www.w3.org/2000/svg",A={};function D(t,e){if(e){if("#text"==t&&(t=r.doc.createTextNode(e.text||e["#text"]||"")),"#comment"==t&&(t=r.doc.createComment(e.text||e["#text"]||"")),"string"==typeof t&&(t=D(t)),"string"==typeof e)return 1==t.nodeType?"xlink:"==e.substring(0,6)?t.getAttributeNS(E,e.substring(6)):"xml:"==e.substring(0,4)?t.getAttributeNS(B,e.substring(4)):t.getAttribute(e):"text"==e?t.nodeValue:null;if(1==t.nodeType){for(var n in e)if(e[a](n)){var i=s(e[n]);i?"xlink:"==n.substring(0,6)?t.setAttributeNS(E,n.substring(6),i):"xml:"==n.substring(0,4)?t.setAttributeNS(B,n.substring(4),i):t.setAttribute(n,i):t.removeAttribute(n)}}else"text"in e&&(t.nodeValue=e.text)}else t=r.doc.createElementNS(B,t);return t}function M(t,e){return"finite"==(e=s.prototype.toLowerCase.call(e))?isFinite(t):!("array"!=e||!(t instanceof Array||Array.isArray&&Array.isArray(t)))||"null"==e&&null===t||e==typeof t&&null!==t||"object"==e&&t===Object(t)||m.call(t).slice(8,-1).toLowerCase()==e}function N(t,e){for(var n=0,r=t.length;n<r;n++)if(t[n]===e)return t.push(t.splice(n,1)[0])}function _(t,e,n){return function r(){var i=Array.prototype.slice.call(arguments,0),o=i.join("␀"),s=r.cache=r.cache||{},l=r.count=r.count||[];return s[a](o)?(N(l,o),n?n(s[o]):s[o]):(l.length>=1e3&&delete s[l.shift()],l.push(o),s[o]=t.apply(e,i),n?n(s[o]):s[o])}}function T(t){return t%360*p/180}n.url=function(t){return"url('#"+t+"')"},n._.$=D,n._.id=S,n.format=(i=/\{([^\}]+)\}/g,o=/(?:(?:^|\.)(.+?)(?=\[|\.|$|\()|\[('|")(.+?)\2\])(\(\))?/g,function(t,e){return s(t).replace(i,(function(t,n){return function(t,e,n){var r=n;return e.replace(o,(function(t,e,n,i,o){e=e||i,r&&(e in r&&(r=r[e]),"function"==typeof r&&o&&(r=r()))})),r=(null==r||r==n?t:r)+""}(t,n,e)}))}),n._.clone=function t(e){if("function"==typeof e||Object(e)!==e)return e;var n=new e.constructor;for(var r in e)e[a](r)&&(n[r]=t(e[r]));return n},n._.cacher=_,n.rad=T,n.deg=function(t){return 180*t/p%360},n.sin=function(t){return u.sin(n.rad(t))},n.tan=function(t){return u.tan(n.rad(t))},n.cos=function(t){return u.cos(n.rad(t))},n.asin=function(t){return n.deg(u.asin(t))},n.acos=function(t){return n.deg(u.acos(t))},n.atan=function(t){return n.deg(u.atan(t))},n.atan2=function(t){return n.deg(u.atan2(t))},n.angle=function t(e,n,r,i,o,a){if(null==o){var s=e-r,l=n-i;return s||l?(180+180*u.atan2(-l,-s)/p+360)%360:0}return t(e,n,o,a)-t(r,i,o,a)},n.len=function(t,e,r,i){return Math.sqrt(n.len2(t,e,r,i))},n.len2=function(t,e,n,r){return(t-n)*(t-n)+(e-r)*(e-r)},n.closestPoint=function(t,e,n){function r(t){var r=t.x-e,i=t.y-n;return r*r+i*i}for(var i,o,a,s,l=t.node,h=l.getTotalLength(),u=h/l.pathSegList.numberOfItems*.125,c=1/0,f=0;f<=h;f+=u)(s=r(a=l.getPointAtLength(f)))<c&&(i=a,o=f,c=s);for(u*=.5;u>.5;){var d,p,g,m,v,y;(g=o-u)>=0&&(v=r(d=l.getPointAtLength(g)))<c?(i=d,o=g,c=v):(m=o+u)<=h&&(y=r(p=l.getPointAtLength(m)))<c?(i=p,o=m,c=y):u*=.5}return i={x:i.x,y:i.y,length:o,distance:Math.sqrt(c)}},n.is=M,n.snapTo=function(t,e,n){if(n=M(n,"finite")?n:10,M(t,"array")){for(var r=t.length;r--;)if(d(t[r]-e)<=n)return t[r]}else{var i=e%(t=+t);if(i<n)return e-i;if(i>t-n)return e-i+t}return e},n.getRGB=_((function(t){if(!t||(t=s(t)).indexOf("-")+1)return{r:-1,g:-1,b:-1,hex:"none",error:1,toString:j};if("none"==t)return{r:-1,g:-1,b:-1,hex:"none",toString:j};if(!x[a](t.toLowerCase().substring(0,2))&&"#"!=t.charAt()&&(t=L(t)),!t)return{r:-1,g:-1,b:-1,hex:"none",error:1,toString:j};var e,r,i,o,d,p,g=t.match(v);return g?(g[2]&&(i=h(g[2].substring(5),16),r=h(g[2].substring(3,5),16),e=h(g[2].substring(1,3),16)),g[3]&&(i=h((d=g[3].charAt(3))+d,16),r=h((d=g[3].charAt(2))+d,16),e=h((d=g[3].charAt(1))+d,16)),g[4]&&(p=g[4].split(y),e=l(p[0]),"%"==p[0].slice(-1)&&(e*=2.55),r=l(p[1]),"%"==p[1].slice(-1)&&(r*=2.55),i=l(p[2]),"%"==p[2].slice(-1)&&(i*=2.55),"rgba"==g[1].toLowerCase().slice(0,4)&&(o=l(p[3])),p[3]&&"%"==p[3].slice(-1)&&(o/=100)),g[5]?(p=g[5].split(y),e=l(p[0]),"%"==p[0].slice(-1)&&(e/=100),r=l(p[1]),"%"==p[1].slice(-1)&&(r/=100),i=l(p[2]),"%"==p[2].slice(-1)&&(i/=100),("deg"==p[0].slice(-3)||"°"==p[0].slice(-1))&&(e/=360),"hsba"==g[1].toLowerCase().slice(0,4)&&(o=l(p[3])),p[3]&&"%"==p[3].slice(-1)&&(o/=100),n.hsb2rgb(e,r,i,o)):g[6]?(p=g[6].split(y),e=l(p[0]),"%"==p[0].slice(-1)&&(e/=100),r=l(p[1]),"%"==p[1].slice(-1)&&(r/=100),i=l(p[2]),"%"==p[2].slice(-1)&&(i/=100),("deg"==p[0].slice(-3)||"°"==p[0].slice(-1))&&(e/=360),"hsla"==g[1].toLowerCase().slice(0,4)&&(o=l(p[3])),p[3]&&"%"==p[3].slice(-1)&&(o/=100),n.hsl2rgb(e,r,i,o)):(e=f(u.round(e),255),r=f(u.round(r),255),i=f(u.round(i),255),o=f(c(o,0),1),(g={r:e,g:r,b:i,toString:j}).hex="#"+(16777216|i|r<<8|e<<16).toString(16).slice(1),g.opacity=M(o,"finite")?o:1,g)):{r:-1,g:-1,b:-1,hex:"none",error:1,toString:j}}),n),n.hsb=_((function(t,e,r){return n.hsb2rgb(t,e,r).hex})),n.hsl=_((function(t,e,r){return n.hsl2rgb(t,e,r).hex})),n.rgb=_((function(t,e,n,r){if(M(r,"finite")){var i=u.round;return"rgba("+[i(t),i(e),i(n),+r.toFixed(2)]+")"}return"#"+(16777216|n|e<<8|t<<16).toString(16).slice(1)}));var L=function(t){var e=r.doc.getElementsByTagName("head")[0]||r.doc.getElementsByTagName("svg")[0],n="rgb(255, 0, 0)";return(L=_((function(t){if("red"==t.toLowerCase())return n;e.style.color=n,e.style.color=t;var i=r.doc.defaultView.getComputedStyle(e,"").getPropertyValue("color");return i==n?null:i})))(t)},P=function(){return"hsb("+[this.h,this.s,this.b]+")"},z=function(){return"hsl("+[this.h,this.s,this.l]+")"},j=function(){return 1==this.opacity||null==this.opacity?this.hex:"rgba("+[this.r,this.g,this.b,this.opacity]+")"},q=function(t,e,r){if(null==e&&M(t,"object")&&"r"in t&&"g"in t&&"b"in t&&(r=t.b,e=t.g,t=t.r),null==e&&M(t,string)){var i=n.getRGB(t);t=i.r,e=i.g,r=i.b}return(t>1||e>1||r>1)&&(t/=255,e/=255,r/=255),[t,e,r]},O=function(t,e,r,i){var o={r:t=u.round(255*t),g:e=u.round(255*e),b:r=u.round(255*r),opacity:M(i,"finite")?i:1,hex:n.rgb(t,e,r),toString:j};return M(i,"finite")&&(o.opacity=i),o};n.color=function(t){var e;return M(t,"object")&&"h"in t&&"s"in t&&"b"in t?(e=n.hsb2rgb(t),t.r=e.r,t.g=e.g,t.b=e.b,t.opacity=1,t.hex=e.hex):M(t,"object")&&"h"in t&&"s"in t&&"l"in t?(e=n.hsl2rgb(t),t.r=e.r,t.g=e.g,t.b=e.b,t.opacity=1,t.hex=e.hex):(M(t,"string")&&(t=n.getRGB(t)),M(t,"object")&&"r"in t&&"g"in t&&"b"in t&&!("error"in t)?(e=n.rgb2hsl(t),t.h=e.h,t.s=e.s,t.l=e.l,e=n.rgb2hsb(t),t.v=e.b):((t={hex:"none"}).r=t.g=t.b=t.h=t.s=t.v=t.l=-1,t.error=1)),t.toString=j,t},n.hsb2rgb=function(t,e,n,r){var i,o,a,s,l;return M(t,"object")&&"h"in t&&"s"in t&&"b"in t&&(n=t.b,e=t.s,r=t.o,t=t.h),s=(l=n*e)*(1-d((t=(t*=360)%360/60)%2-1)),i=o=a=n-l,O(i+=[l,s,0,0,s,l][t=~~t],o+=[s,l,l,s,0,0][t],a+=[0,0,s,l,l,s][t],r)},n.hsl2rgb=function(t,e,n,r){var i,o,a,s,l;return M(t,"object")&&"h"in t&&"s"in t&&"l"in t&&(n=t.l,e=t.s,t=t.h),(t>1||e>1||n>1)&&(t/=360,e/=100,n/=100),s=(l=2*e*(n<.5?n:1-n))*(1-d((t=(t*=360)%360/60)%2-1)),i=o=a=n-l/2,O(i+=[l,s,0,0,s,l][t=~~t],o+=[s,l,l,s,0,0][t],a+=[0,0,s,l,l,s][t],r)},n.rgb2hsb=function(t,e,n){var r,i;return t=(n=q(t,e,n))[0],e=n[1],n=n[2],{h:((0==(i=(r=c(t,e,n))-f(t,e,n))?null:r==t?(e-n)/i:r==e?(n-t)/i+2:(t-e)/i+4)+360)%6*60/360,s:0==i?0:i/r,b:r,toString:P}},n.rgb2hsl=function(t,e,n){var r,i,o,a;return t=(n=q(t,e,n))[0],e=n[1],n=n[2],r=((i=c(t,e,n))+(o=f(t,e,n)))/2,{h:((0==(a=i-o)?null:i==t?(e-n)/a:i==e?(n-t)/a+2:(t-e)/a+4)+360)%6*60/360,s:0==a?0:r<.5?a/(2*r):a/(2-2*r),l:r,toString:z}},n.parsePathString=function(t){if(!t)return null;var e=n.path(t);if(e.arr)return n.path.clone(e.arr);var r={a:7,c:6,o:2,h:1,l:2,m:2,r:4,q:4,s:4,t:2,v:1,u:3,z:0},i=[];return M(t,"array")&&M(t[0],"array")&&(i=n.path.clone(t)),i.length||s(t).replace(b,(function(t,e,n){var o=[],a=e.toLowerCase();if(n.replace(w,(function(t,e){e&&o.push(+e)})),"m"==a&&o.length>2&&(i.push([e].concat(o.splice(0,2))),a="l",e="m"==e?"l":"L"),"o"==a&&1==o.length&&i.push([e,o[0]]),"r"==a)i.push([e].concat(o));else for(;o.length>=r[a]&&(i.push([e].concat(o.splice(0,r[a]))),r[a]););})),i.toString=n.path.toString,e.arr=n.path.clone(i),i};var V=n.parseTransformString=function(t){if(!t)return null;var e=[];return M(t,"array")&&M(t[0],"array")&&(e=n.path.clone(t)),e.length||s(t).replace(F,(function(t,n,r){var i=[];n.toLowerCase(),r.replace(w,(function(t,e){e&&i.push(+e)})),e.push([n].concat(i))})),e.toString=n.path.toString,e};function I(t){return t.node.ownerSVGElement&&H(t.node.ownerSVGElement)||n.select("svg")}function G(t){M(t,"array")||(t=Array.prototype.slice.call(arguments,0));for(var e=0,n=0,r=this.node;this[e];)delete this[e++];for(e=0;e<t.length;e++)"set"==t[e].type?t[e].forEach((function(t){r.appendChild(t.node)})):r.appendChild(t[e].node);var i=r.childNodes;for(e=0;e<i.length;e++)this[n++]=H(i[e]);return this}function R(t){if(t.snap in A)return A[t.snap];var e;try{e=t.ownerSVGElement}catch(t){}this.node=t,e&&(this.paper=new U(e)),this.type=t.tagName||t.nodeName;var n=this.id=S(this);if(this.anims={},this._={transform:[]},t.snap=n,A[n]=this,"g"==this.type&&(this.add=G),this.type in{g:1,mask:1,pattern:1,symbol:1})for(var r in U.prototype)U.prototype[a](r)&&(this[r]=U.prototype[r])}function X(t){this.node=t}function $(t,e){var n=D(t);return e.appendChild(n),H(n)}function U(t,e){var n,i,o,s=U.prototype;if(t&&t.tagName&&"svg"==t.tagName.toLowerCase()){if(t.snap in A)return A[t.snap];var l=t.ownerDocument;for(var h in n=new R(t),i=t.getElementsByTagName("desc")[0],o=t.getElementsByTagName("defs")[0],i||((i=D("desc")).appendChild(l.createTextNode("Created with Snap")),n.node.appendChild(i)),o||(o=D("defs"),n.node.appendChild(o)),n.defs=o,s)s[a](h)&&(n[h]=s[h]);n.paper=n.root=n}else D((n=$("svg",r.doc.body)).node,{height:e,version:1.1,width:t,xmlns:B});return n}function H(t){return t?t instanceof R||t instanceof X?t:t.tagName&&"svg"==t.tagName.toLowerCase()?new U(t):t.tagName&&"object"==t.tagName.toLowerCase()&&"image/svg+xml"==t.type?new U(t.contentDocument.getElementsByTagName("svg")[0]):new R(t):t}n._.svgTransform2string=function(t){var e=[];return t=t.replace(/(?:^|\s)(\w+)\(([^)]+)\)/g,(function(t,n,r){return r=r.split(/\s*,\s*|\s+/),"rotate"==n&&1==r.length&&r.push(0,0),"scale"==n&&(r.length>2?r=r.slice(0,2):2==r.length&&r.push(0,0),1==r.length&&r.push(r[0],0,0)),"skewX"==n?e.push(["m",1,0,u.tan(T(r[0])),1,0,0]):"skewY"==n?e.push(["m",1,u.tan(T(r[0])),0,1,0,0]):e.push([n.charAt(0)].concat(r)),t})),e},n._.rgTransform=/^[a-z][\s]*-?\.?\d/i,n._.transform2matrix=function(t,e){var r=V(t),i=new n.Matrix;if(r)for(var o=0,a=r.length;o<a;o++){var l,h,u,c,f,d=r[o],p=d.length,g=s(d[0]).toLowerCase(),m=d[0]!=g,v=m?i.invert():0;"t"==g&&2==p?i.translate(d[1],0):"t"==g&&3==p?m?(l=v.x(0,0),h=v.y(0,0),u=v.x(d[1],d[2]),c=v.y(d[1],d[2]),i.translate(u-l,c-h)):i.translate(d[1],d[2]):"r"==g?2==p?(f=f||e,i.rotate(d[1],f.x+f.width/2,f.y+f.height/2)):4==p&&(m?(u=v.x(d[2],d[3]),c=v.y(d[2],d[3]),i.rotate(d[1],u,c)):i.rotate(d[1],d[2],d[3])):"s"==g?2==p||3==p?(f=f||e,i.scale(d[1],d[p-1],f.x+f.width/2,f.y+f.height/2)):4==p?m?(u=v.x(d[2],d[3]),c=v.y(d[2],d[3]),i.scale(d[1],d[1],u,c)):i.scale(d[1],d[1],d[2],d[3]):5==p&&(m?(u=v.x(d[3],d[4]),c=v.y(d[3],d[4]),i.scale(d[1],d[2],u,c)):i.scale(d[1],d[2],d[3],d[4])):"m"==g&&7==p&&i.add(d[1],d[2],d[3],d[4],d[5],d[6])}return i},n._unit2px=function(t,e,n){var r=I(t).node,i={},o=r.querySelector(".svg---mgr");function a(t){if(null==t)return"";if(t==+t)return t;D(o,{width:t});try{return o.getBBox().width}catch(t){return 0}}function s(t){if(null==t)return"";if(t==+t)return t;D(o,{height:t});try{return o.getBBox().height}catch(t){return 0}}function l(r,o){null==e?i[r]=o(t.attr(r)||0):r==e&&(i=o(null==n?t.attr(r)||0:n))}switch(o||(o=D("rect"),D(o,{x:-9e9,y:-9e9,width:10,height:10,class:"svg---mgr",fill:"none"}),r.appendChild(o)),t.type){case"rect":l("rx",a),l("ry",s);case"image":l("width",a),l("height",s);case"text":l("x",a),l("y",s);break;case"circle":l("cx",a),l("cy",s),l("r",a);break;case"ellipse":l("cx",a),l("cy",s),l("rx",a),l("ry",s);break;case"line":l("x1",a),l("x2",a),l("y1",s),l("y2",s);break;case"marker":l("refX",a),l("markerWidth",a),l("refY",s),l("markerHeight",s);break;case"radialGradient":l("fx",a),l("fy",s);break;case"tspan":l("dx",a),l("dy",s);break;default:l(e,a)}return r.removeChild(o),i},r.doc.contains||r.doc.compareDocumentPosition,n._.getSomeDefs=function(t){var e=t.node.ownerSVGElement&&H(t.node.ownerSVGElement)||t.node.parentNode&&H(t.node.parentNode)||n.select("svg")||n(0,0),r=e.select("defs"),i=null!=r&&r.node;return i||(i=$("defs",e.node).node),i},n._.getSomeSVG=I,n.select=function(t){return t=s(t).replace(/([^\\]):/g,"$1\\:"),H(r.doc.querySelector(t))},n.selectAll=function(t){for(var e=r.doc.querySelectorAll(t),i=(n.set||Array)(),o=0;o<e.length;o++)i.push(H(e[o]));return i},setInterval((function(){for(var t in A)if(A[a](t)){var e=A[t],n=e.node;("svg"!=e.type&&!n.ownerSVGElement||"svg"==e.type&&(!n.parentNode||"ownerSVGElement"in n.parentNode&&!n.ownerSVGElement))&&delete A[t]}}),1e4),R.prototype.attr=function(t,n){var r=this,i=r.node;if(!t){if(1!=i.nodeType)return{text:i.nodeValue};for(var o=i.attributes,s={},l=0,h=o.length;l<h;l++)s[o[l].nodeName]=o[l].nodeValue;return s}if(M(t,"string")){if(!(arguments.length>1))return e("snap.util.getattr."+t,r).firstDefined();var u={};u[t]=n,t=u}for(var c in t)t[a](c)&&e("snap.util.attr."+c,r,t[c]);return r},n.parse=function(t){var e=r.doc.createDocumentFragment(),n=!0,i=r.doc.createElement("div");if((t=s(t)).match(/^\s*<\s*svg(?:\s|>)/)||(t="<svg>"+t+"</svg>",n=!1),i.innerHTML=t,t=i.getElementsByTagName("svg")[0])if(n)e=t;else for(;t.firstChild;)e.appendChild(t.firstChild);return new X(e)},n.fragment=function(){for(var t=Array.prototype.slice.call(arguments,0),e=r.doc.createDocumentFragment(),i=0,o=t.length;i<o;i++){var a=t[i];a.node&&a.node.nodeType&&e.appendChild(a.node),a.nodeType&&e.appendChild(a),"string"==typeof a&&e.appendChild(n.parse(a).node)}return new X(e)},n._.make=$,n._.wrap=H,U.prototype.el=function(t,e){var n=$(t,this.node);return e&&n.attr(e),n},R.prototype.children=function(){for(var t=[],e=this.node.childNodes,r=0,i=e.length;r<i;r++)t[r]=n(e[r]);return t},R.prototype.toJSON=function(){var t=[];return function t(e,n){for(var r=0,i=e.length;r<i;r++){var o={type:e[r].type,attr:e[r].attr()},a=e[r].children();n.push(o),a.length&&t(a,o.childNodes=[])}}([this],t),t[0]},e.on("snap.util.getattr",(function(){var t=e.nt(),n=(t=t.substring(t.lastIndexOf(".")+1)).replace(/[A-Z]/g,(function(t){return"-"+t.toLowerCase()}));return W[a](n)?this.node.ownerDocument.defaultView.getComputedStyle(this.node,null).getPropertyValue(n):D(this.node,t)}));var W={"alignment-baseline":0,"baseline-shift":0,clip:0,"clip-path":0,"clip-rule":0,color:0,"color-interpolation":0,"color-interpolation-filters":0,"color-profile":0,"color-rendering":0,cursor:0,direction:0,display:0,"dominant-baseline":0,"enable-background":0,fill:0,"fill-opacity":0,"fill-rule":0,filter:0,"flood-color":0,"flood-opacity":0,font:0,"font-family":0,"font-size":0,"font-size-adjust":0,"font-stretch":0,"font-style":0,"font-variant":0,"font-weight":0,"glyph-orientation-horizontal":0,"glyph-orientation-vertical":0,"image-rendering":0,kerning:0,"letter-spacing":0,"lighting-color":0,marker:0,"marker-end":0,"marker-mid":0,"marker-start":0,mask:0,opacity:0,overflow:0,"pointer-events":0,"shape-rendering":0,"stop-color":0,"stop-opacity":0,stroke:0,"stroke-dasharray":0,"stroke-dashoffset":0,"stroke-linecap":0,"stroke-linejoin":0,"stroke-miterlimit":0,"stroke-opacity":0,"stroke-width":0,"text-anchor":0,"text-decoration":0,"text-rendering":0,"unicode-bidi":0,visibility:0,"word-spacing":0,"writing-mode":0};return e.on("snap.util.attr",(function(t){var n=e.nt(),r={};r[n=n.substring(n.lastIndexOf(".")+1)]=t;var i=n.replace(/-(\w)/gi,(function(t,e){return e.toUpperCase()})),o=n.replace(/[A-Z]/g,(function(t){return"-"+t.toLowerCase()}));W[a](o)?this.node.style[i]=null==t?"":t:D(this.node,r)})),U.prototype,n.ajax=function(t,n,r,i){var o=new XMLHttpRequest,a=S();if(o){if(M(n,"function"))i=r,r=n,n=null;else if(M(n,"object")){var s=[];for(var l in n)n.hasOwnProperty(l)&&s.push(encodeURIComponent(l)+"="+encodeURIComponent(n[l]));n=s.join("&")}return o.open(n?"POST":"GET",t,!0),n&&(o.setRequestHeader("X-Requested-With","XMLHttpRequest"),o.setRequestHeader("Content-type","application/x-www-form-urlencoded")),r&&(e.once("snap.ajax."+a+".0",r),e.once("snap.ajax."+a+".200",r),e.once("snap.ajax."+a+".304",r)),o.onreadystatechange=function(){4==o.readyState&&e("snap.ajax."+a+"."+o.status,i,o)},4==o.readyState||o.send(n),o}},n.load=function(t,e,r){n.ajax(t,(function(t){var i=n.parse(t.responseText);r?e.call(r,i):e(i)}))},n.getElementByPoint=function(t,e){this.canvas;var n,i,o,a,s,l,h,u=r.doc.elementFromPoint(t,e);if(r.win.opera&&"svg"==u.tagName){var c=(i=(n=u).getBoundingClientRect(),o=n.ownerDocument,a=o.body,s=o.documentElement,l=s.clientTop||a.clientTop||0,h=s.clientLeft||a.clientLeft||0,{y:i.top+(g.win.pageYOffset||s.scrollTop||a.scrollTop)-l,x:i.left+(g.win.pageXOffset||s.scrollLeft||a.scrollLeft)-h}),f=u.createSVGRect();f.x=t-c.x,f.y=e-c.y,f.width=f.height=1;var d=u.getIntersectionList(f,null);d.length&&(u=d[d.length-1])}return u?H(u):null},n.plugin=function(t){t(n,R,U,r,X)},r.win.Snap=n,n}(t||this);return r.plugin((function(n,r,i,o,a){var s=r.prototype,l=n.is,h=String,u=n._unit2px,c=n._.$,f=n._.make,d=n._.getSomeDefs,p="hasOwnProperty",g=n._.wrap;s.getBBox=function(t){if("tspan"==this.type)return n._.box(this.node.getClientRects().item(0));if(!n.Matrix||!n.path)return this.node.getBBox();var e=this,r=new n.Matrix;if(e.removed)return n._.box();for(;"use"==e.type;)if(t||(r=r.add(e.transform().localMatrix.translate(e.attr("x")||0,e.attr("y")||0))),e.original)e=e.original;else{var i=e.attr("xlink:href");e=e.original=e.node.ownerDocument.getElementById(i.substring(i.indexOf("#")+1))}var o=e._,a=n.path.get[e.type]||n.path.get.deflt;try{return t?(o.bboxwt=a?n.path.getBBox(e.realPath=a(e)):n._.box(e.node.getBBox()),n._.box(o.bboxwt)):(e.realPath=a(e),e.matrix=e.transform().localMatrix,o.bbox=n.path.getBBox(n.path.map(e.realPath,r.add(e.matrix))),n._.box(o.bbox))}catch(t){return n._.box()}};var m=function(){return this.string};function v(t,e){if(null==e){var r=!0;if(!(e="linearGradient"==t.type||"radialGradient"==t.type?t.node.getAttribute("gradientTransform"):"pattern"==t.type?t.node.getAttribute("patternTransform"):t.node.getAttribute("transform")))return new n.Matrix;e=n._.svgTransform2string(e)}else e=n._.rgTransform.test(e)?h(e).replace(/\.{3}|\u2026/g,t._.transform||""):n._.svgTransform2string(e),l(e,"array")&&(e=n.path?n.path.toString.call(e):h(e)),t._.transform=e;var i=n._.transform2matrix(e,t.getBBox(1));if(r)return i;t.matrix=i}s.transform=function(t){var e=this._;if(null==t){for(var r,i=this,o=new n.Matrix(this.node.getCTM()),a=v(this),s=[a],l=new n.Matrix,u=a.toTransformString(),f=h(a)==h(this.matrix)?h(e.transform):u;"svg"!=i.type&&(i=i.parent());)s.push(v(i));for(r=s.length;r--;)l.add(s[r]);return{string:f,globalMatrix:o,totalMatrix:l,localMatrix:a,diffMatrix:o.clone().add(a.invert()),global:o.toTransformString(),total:l.toTransformString(),local:u,toString:m}}return t instanceof n.Matrix?(this.matrix=t,this._.transform=t.toTransformString()):v(this,t),this.node&&("linearGradient"==this.type||"radialGradient"==this.type?c(this.node,{gradientTransform:this.matrix}):"pattern"==this.type?c(this.node,{patternTransform:this.matrix}):c(this.node,{transform:this.matrix})),this},s.parent=function(){return g(this.node.parentNode)},s.append=s.add=function(t){if(t){if("set"==t.type){var e=this;return t.forEach((function(t){e.add(t)})),this}t=g(t),this.node.appendChild(t.node),t.paper=this.paper}return this},s.appendTo=function(t){return t&&(t=g(t)).append(this),this},s.prepend=function(t){if(t){if("set"==t.type){var e,n=this;return t.forEach((function(t){e?e.after(t):n.prepend(t),e=t})),this}var r=(t=g(t)).parent();this.node.insertBefore(t.node,this.node.firstChild),this.add&&this.add(),t.paper=this.paper,this.parent()&&this.parent().add(),r&&r.add()}return this},s.prependTo=function(t){return(t=g(t)).prepend(this),this},s.before=function(t){if("set"==t.type){var e=this;return t.forEach((function(t){var n=t.parent();e.node.parentNode.insertBefore(t.node,e.node),n&&n.add()})),this.parent().add(),this}var n=(t=g(t)).parent();return this.node.parentNode.insertBefore(t.node,this.node),this.parent()&&this.parent().add(),n&&n.add(),t.paper=this.paper,this},s.after=function(t){var e=(t=g(t)).parent();return this.node.nextSibling?this.node.parentNode.insertBefore(t.node,this.node.nextSibling):this.node.parentNode.appendChild(t.node),this.parent()&&this.parent().add(),e&&e.add(),t.paper=this.paper,this},s.insertBefore=function(t){t=g(t);var e=this.parent();return t.node.parentNode.insertBefore(this.node,t.node),this.paper=t.paper,e&&e.add(),t.parent()&&t.parent().add(),this},s.insertAfter=function(t){t=g(t);var e=this.parent();return t.node.parentNode.insertBefore(this.node,t.node.nextSibling),this.paper=t.paper,e&&e.add(),t.parent()&&t.parent().add(),this},s.remove=function(){var t=this.parent();return this.node.parentNode&&this.node.parentNode.removeChild(this.node),delete this.paper,this.removed=!0,t&&t.add(),this},s.select=function(t){return g(this.node.querySelector(t))},s.selectAll=function(t){for(var e=this.node.querySelectorAll(t),r=(n.set||Array)(),i=0;i<e.length;i++)r.push(g(e[i]));return r},s.asPX=function(t,e){return null==e&&(e=this.attr(t)),+u(this,t,e)},s.use=function(){var t,e=this.node.id;return e||(e=this.id,c(this.node,{id:e})),t="linearGradient"==this.type||"radialGradient"==this.type||"pattern"==this.type?f(this.type,this.node.parentNode):f("use",this.node.parentNode),c(t.node,{"xlink:href":"#"+e}),t.original=this,t},s.clone=function(){var t=g(this.node.cloneNode(!0));return c(t.node,"id")&&c(t.node,{id:t.id}),function(t){var e,r=t.selectAll("*"),i=/^\s*url\(("|'|)(.*)\1\)\s*$/,o=[],a={};function s(t,e){var r=c(t.node,e);(r=(r=r&&r.match(i))&&r[2])&&"#"==r.charAt()&&(r=r.substring(1))&&(a[r]=(a[r]||[]).concat((function(r){var i={};i[e]=n.url(r),c(t.node,i)})))}function l(t){var e=c(t.node,"xlink:href");e&&"#"==e.charAt()&&(e=e.substring(1))&&(a[e]=(a[e]||[]).concat((function(e){t.attr("xlink:href","#"+e)})))}for(var h=0,u=r.length;h<u;h++){s(e=r[h],"fill"),s(e,"stroke"),s(e,"filter"),s(e,"mask"),s(e,"clip-path"),l(e);var f=c(e.node,"id");f&&(c(e.node,{id:e.id}),o.push({old:f,id:e.id}))}for(h=0,u=o.length;h<u;h++){var d=a[o[h].old];if(d)for(var p=0,g=d.length;p<g;p++)d[p](o[h].id)}}(t),t.insertAfter(this),t},s.toDefs=function(){return d(this).appendChild(this.node),this},s.pattern=s.toPattern=function(t,e,n,r){var i=f("pattern",d(this));return null==t&&(t=this.getBBox()),l(t,"object")&&"x"in t&&(e=t.y,n=t.width,r=t.height,t=t.x),c(i.node,{x:t,y:e,width:n,height:r,patternUnits:"userSpaceOnUse",id:i.id,viewBox:[t,e,n,r].join(" ")}),i.node.appendChild(this.node),i},s.marker=function(t,e,n,r,i,o){var a=f("marker",d(this));return null==t&&(t=this.getBBox()),l(t,"object")&&"x"in t&&(e=t.y,n=t.width,r=t.height,i=t.refX||t.cx,o=t.refY||t.cy,t=t.x),c(a.node,{viewBox:[t,e,n,r].join(" "),markerWidth:n,markerHeight:r,orient:"auto",refX:i||0,refY:o||0,id:a.id}),a.node.appendChild(this.node),a};var y={};function x(t){return function(){var e=t?"<"+this.type:"",n=this.node.attributes,r=this.node.childNodes;if(t)for(var i=0,o=n.length;i<o;i++)e+=" "+n[i].name+'="'+n[i].value.replace(/"/g,'\\"')+'"';if(r.length){for(t&&(e+=">"),i=0,o=r.length;i<o;i++)3==r[i].nodeType?e+=r[i].nodeValue:1==r[i].nodeType&&(e+=g(r[i]).toString());t&&(e+="</"+this.type+">")}else t&&(e+="/>");return e}}s.data=function(t,r){var i=y[this.id]=y[this.id]||{};if(0==arguments.length)return e("snap.data.get."+this.id,this,i,null),i;if(1==arguments.length){if(n.is(t,"object")){for(var o in t)t[p](o)&&this.data(o,t[o]);return this}return e("snap.data.get."+this.id,this,i[t],t),i[t]}return i[t]=r,e("snap.data.set."+this.id,this,r,t),this},s.removeData=function(t){return null==t?y[this.id]={}:y[this.id]&&delete y[this.id][t],this},s.outerSVG=s.toString=x(1),s.innerSVG=x(),s.toDataURL=function(){if(t&&t.btoa){var e=this.getBBox(),r=n.format('<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="{width}" height="{height}" viewBox="{x} {y} {width} {height}">{contents}</svg>',{x:+e.x.toFixed(3),y:+e.y.toFixed(3),width:+e.width.toFixed(3),height:+e.height.toFixed(3),contents:this.outerSVG()});return"data:image/svg+xml;base64,"+btoa(unescape(encodeURIComponent(r)))}},a.prototype.select=s.select,a.prototype.selectAll=s.selectAll})),r.plugin((function(t,r,i,o,a){var s=r.prototype,l=t.is,h=String,u="hasOwnProperty";function c(t,e,n){return function(r){var i=r.slice(t,e);return 1==i.length&&(i=i[0]),n?n(i):i}}var f=function(t,e,r,i){"function"!=typeof r||r.length||(i=r,r=n.linear),this.attr=t,this.dur=e,r&&(this.easing=r),i&&(this.callback=i)};t._.Animation=f,t.animation=function(t,e,n,r){return new f(t,e,n,r)},s.inAnim=function(){var t=[];for(var e in this.anims)this.anims[u](e)&&function(e){t.push({anim:new f(e._attrs,e.dur,e.easing,e._callback),mina:e,curStatus:e.status(),status:function(t){return e.status(t)},stop:function(){e.stop()}})}(this.anims[e]);return t},t.animate=function(t,r,i,o,a,s){"function"!=typeof a||a.length||(s=a,a=n.linear);var l=n.time(),h=n(t,r,l,l+o,n.time,i,a);return s&&e.once("mina.finish."+h.id,s),h},s.stop=function(){for(var t=this.inAnim(),e=0,n=t.length;e<n;e++)t[e].stop();return this},s.animate=function(t,r,i,o){"function"!=typeof i||i.length||(o=i,i=n.linear),t instanceof f&&(o=t.callback,i=t.easing,r=t.dur,t=t.attr);var a,s,d,p,g=[],m=[],v={},y=this;for(var x in t)if(t[u](x)){y.equal?(a=(p=y.equal(x,h(t[x]))).from,s=p.to,d=p.f):(a=+y.attr(x),s=+t[x]);var b=l(a,"array")?a.length:1;v[x]=c(g.length,g.length+b,d),g=g.concat(a),m=m.concat(s)}var F=n.time(),w=n(g,m,F,F+r,n.time,(function(t){var e={};for(var n in v)v[u](n)&&(e[n]=v[n](t));y.attr(e)}),i);return y.anims[w.id]=w,w._attrs=t,w._callback=o,e("snap.animcreated."+y.id,w),e.once("mina.finish."+w.id,(function(){e.off("mina.*."+w.id),delete y.anims[w.id],o&&o.call(y)})),e.once("mina.stop."+w.id,(function(){e.off("mina.*."+w.id),delete y.anims[w.id]})),y}})),r.plugin((function(t,e,n,r,i){var o=Object.prototype.toString,a=String,s=Math;function l(t,e,n,r,i,a){if(null==e&&"[object SVGMatrix]"==o.call(t))return this.a=t.a,this.b=t.b,this.c=t.c,this.d=t.d,this.e=t.e,void(this.f=t.f);null!=t?(this.a=+t,this.b=+e,this.c=+n,this.d=+r,this.e=+i,this.f=+a):(this.a=1,this.b=0,this.c=0,this.d=1,this.e=0,this.f=0)}!function(e){function n(t){return t[0]*t[0]+t[1]*t[1]}function r(t){var e=s.sqrt(n(t));t[0]&&(t[0]/=e),t[1]&&(t[1]/=e)}e.add=function(t,e,n,r,i,o){if(t&&t instanceof l)return this.add(t.a,t.b,t.c,t.d,t.e,t.f);var a=t*this.a+e*this.c,s=t*this.b+e*this.d;return this.e+=i*this.a+o*this.c,this.f+=i*this.b+o*this.d,this.c=n*this.a+r*this.c,this.d=n*this.b+r*this.d,this.a=a,this.b=s,this},l.prototype.multLeft=function(t,e,n,r,i,o){if(t&&t instanceof l)return this.multLeft(t.a,t.b,t.c,t.d,t.e,t.f);var a=t*this.a+n*this.b,s=t*this.c+n*this.d,h=t*this.e+n*this.f+i;return this.b=e*this.a+r*this.b,this.d=e*this.c+r*this.d,this.f=e*this.e+r*this.f+o,this.a=a,this.c=s,this.e=h,this},e.invert=function(){var t=this,e=t.a*t.d-t.b*t.c;return new l(t.d/e,-t.b/e,-t.c/e,t.a/e,(t.c*t.f-t.d*t.e)/e,(t.b*t.e-t.a*t.f)/e)},e.clone=function(){return new l(this.a,this.b,this.c,this.d,this.e,this.f)},e.translate=function(t,e){return this.e+=t*this.a+e*this.c,this.f+=t*this.b+e*this.d,this},e.scale=function(t,e,n,r){return null==e&&(e=t),(n||r)&&this.translate(n,r),this.a*=t,this.b*=t,this.c*=e,this.d*=e,(n||r)&&this.translate(-n,-r),this},e.rotate=function(e,n,r){e=t.rad(e),n=n||0,r=r||0;var i=+s.cos(e).toFixed(9),o=+s.sin(e).toFixed(9);return this.add(i,o,-o,i,n,r),this.add(1,0,0,1,-n,-r)},e.skewX=function(t){return this.skew(t,0)},e.skewY=function(t){return this.skew(0,t)},e.skew=function(e,n){e=e||0,n=n||0,e=t.rad(e),n=t.rad(n);var r=s.tan(e).toFixed(9),i=s.tan(n).toFixed(9);return this.add(1,i,r,1,0,0)},e.x=function(t,e){return t*this.a+e*this.c+this.e},e.y=function(t,e){return t*this.b+e*this.d+this.f},e.get=function(t){return+this[a.fromCharCode(97+t)].toFixed(4)},e.toString=function(){return"matrix("+[this.get(0),this.get(1),this.get(2),this.get(3),this.get(4),this.get(5)].join()+")"},e.offset=function(){return[this.e.toFixed(4),this.f.toFixed(4)]},e.determinant=function(){return this.a*this.d-this.b*this.c},e.split=function(){var e={};e.dx=this.e,e.dy=this.f;var i=[[this.a,this.b],[this.c,this.d]];e.scalex=s.sqrt(n(i[0])),r(i[0]),e.shear=i[0][0]*i[1][0]+i[0][1]*i[1][1],i[1]=[i[1][0]-i[0][0]*e.shear,i[1][1]-i[0][1]*e.shear],e.scaley=s.sqrt(n(i[1])),r(i[1]),e.shear/=e.scaley,this.determinant()<0&&(e.scalex=-e.scalex);var o=i[0][1],a=i[1][1];return a<0?(e.rotate=t.deg(s.acos(a)),o<0&&(e.rotate=360-e.rotate)):e.rotate=t.deg(s.asin(o)),e.isSimple=!(+e.shear.toFixed(9)||e.scalex.toFixed(9)!=e.scaley.toFixed(9)&&e.rotate),e.isSuperSimple=!+e.shear.toFixed(9)&&e.scalex.toFixed(9)==e.scaley.toFixed(9)&&!e.rotate,e.noRotation=!+e.shear.toFixed(9)&&!e.rotate,e},e.toTransformString=function(t){var e=t||this.split();return+e.shear.toFixed(9)?"m"+[this.get(0),this.get(1),this.get(2),this.get(3),this.get(4),this.get(5)]:(e.scalex=+e.scalex.toFixed(4),e.scaley=+e.scaley.toFixed(4),e.rotate=+e.rotate.toFixed(4),(e.dx||e.dy?"t"+[+e.dx.toFixed(4),+e.dy.toFixed(4)]:"")+(e.rotate?"r"+[+e.rotate.toFixed(4),0,0]:"")+(1!=e.scalex||1!=e.scaley?"s"+[e.scalex,e.scaley,0,0]:""))}}(l.prototype),t.Matrix=l,t.matrix=function(t,e,n,r,i,o){return new l(t,e,n,r,i,o)}})),r.plugin((function(t,n,r,i,o){var a,s=t._.make,l=t._.wrap,h=t.is,u=t._.getSomeDefs,c=/^url\((['"]?)([^)]+)\1\)$/,f=t._.$,d=t.url,p=String,g=t._.separator;function m(r){return function(i){if(e.stop(),i instanceof o&&1==i.node.childNodes.length&&("radialGradient"==i.node.firstChild.tagName||"linearGradient"==i.node.firstChild.tagName||"pattern"==i.node.firstChild.tagName)&&(i=i.node.firstChild,u(this).appendChild(i),i=l(i)),i instanceof n)if("radialGradient"==i.type||"linearGradient"==i.type||"pattern"==i.type){i.node.id||f(i.node,{id:i.id});var a=d(i.node.id)}else a=i.attr(r);else if((a=t.color(i)).error){var s=t(u(this).ownerSVGElement).gradient(i);s?(s.node.id||f(s.node,{id:s.id}),a=d(s.node.id)):a=i}else a=p(a);var h={};h[r]=a,f(this.node,h),this.node.style[r]=""}}t.deurl=function(t){var e=String(t).match(c);return e?e[2]:t},e.on("snap.util.attr.mask",(function(t){if(t instanceof n||t instanceof o){if(e.stop(),t instanceof o&&1==t.node.childNodes.length&&(t=t.node.firstChild,u(this).appendChild(t),t=l(t)),"mask"==t.type)var r=t;else(r=s("mask",u(this))).node.appendChild(t.node);!r.node.id&&f(r.node,{id:r.id}),f(this.node,{mask:d(r.id)})}})),a=function(t){if(t instanceof n||t instanceof o){e.stop();for(var r,i=t.node;i;){if("clipPath"===i.nodeName){r=new n(i);break}if("svg"===i.nodeName){r=void 0;break}i=i.parentNode}r||((r=s("clipPath",u(this))).node.appendChild(t.node),!r.node.id&&f(r.node,{id:r.id})),f(this.node,{"clip-path":d(r.node.id||r.id)})}},e.on("snap.util.attr.clip",a),e.on("snap.util.attr.clip-path",a),e.on("snap.util.attr.clipPath",a),e.on("snap.util.attr.fill",m("fill")),e.on("snap.util.attr.stroke",m("stroke"));var v=/^([lr])(?:\(([^)]*)\))?(.*)$/i;function y(t){e.stop(),t==+t&&(t+="px"),this.node.style.fontSize=t}function x(){return e.stop(),this.node.style.fontSize}e.on("snap.util.grad.parse",(function(t){var e=(t=p(t)).match(v);if(!e)return null;var n=e[1],r=e[2],i=e[3];1==(r=r.split(/\s*,\s*/).map((function(t){return+t==t?+t:t}))).length&&0==r[0]&&(r=[]);var o=(i=(i=i.split("-")).map((function(t){var e={color:(t=t.split(":"))[0]};return t[1]&&(e.offset=parseFloat(t[1])),e}))).length,a=0,s=0;function l(t,e){for(var n=(e-a)/(t-s),r=s;r<t;r++)i[r].offset=+(+a+n*(r-s)).toFixed(2);s=t,a=e}o--;for(var h=0;h<o;h++)"offset"in i[h]&&l(h,i[h].offset);return i[o].offset=i[o].offset||100,l(o,i[o].offset),{type:n,params:r,stops:i}})),e.on("snap.util.attr.d",(function(n){e.stop(),h(n,"array")&&h(n[0],"array")&&(n=t.path.toString.call(n)),(n=p(n)).match(/[ruo]/i)&&(n=t.path.toAbsolute(n)),f(this.node,{d:n})}))(-1),e.on("snap.util.attr.#text",(function(t){e.stop(),t=p(t);for(var n=i.doc.createTextNode(t);this.node.firstChild;)this.node.removeChild(this.node.firstChild);this.node.appendChild(n)}))(-1),e.on("snap.util.attr.path",(function(t){e.stop(),this.attr({d:t})}))(-1),e.on("snap.util.attr.class",(function(t){e.stop(),this.node.className.baseVal=t}))(-1),e.on("snap.util.attr.viewBox",(function(t){var n;n=h(t,"object")&&"x"in t?[t.x,t.y,t.width,t.height].join(" "):h(t,"array")?t.join(" "):t,f(this.node,{viewBox:n}),e.stop()}))(-1),e.on("snap.util.attr.transform",(function(t){this.transform(t),e.stop()}))(-1),e.on("snap.util.attr.r",(function(t){"rect"==this.type&&(e.stop(),f(this.node,{rx:t,ry:t}))}))(-1),e.on("snap.util.attr.textpath",(function(t){if(e.stop(),"text"==this.type){var r,i,o;if(!t&&this.textPath){for(i=this.textPath;i.node.firstChild;)this.node.appendChild(i.node.firstChild);return i.remove(),void delete this.textPath}if(h(t,"string")){var a=u(this),s=l(a.parentNode).path(t);a.appendChild(s.node),r=s.id,s.attr({id:r})}else(t=l(t))instanceof n&&((r=t.attr("id"))||(r=t.id,t.attr({id:r})));if(r)if(i=this.textPath,o=this.node,i)i.attr({"xlink:href":"#"+r});else{for(i=f("textPath",{"xlink:href":"#"+r});o.firstChild;)i.appendChild(o.firstChild);o.appendChild(i),this.textPath=l(i)}}}))(-1),e.on("snap.util.attr.text",(function(t){if("text"==this.type){for(var n=this.node,r=function(t){var e=f("tspan");if(h(t,"array"))for(var n=0;n<t.length;n++)e.appendChild(r(t[n]));else e.appendChild(i.doc.createTextNode(t));return e.normalize&&e.normalize(),e};n.firstChild;)n.removeChild(n.firstChild);for(var o=r(t);o.firstChild;)n.appendChild(o.firstChild)}e.stop()}))(-1),e.on("snap.util.attr.fontSize",y)(-1),e.on("snap.util.attr.font-size",y)(-1),e.on("snap.util.getattr.transform",(function(){return e.stop(),this.transform()}))(-1),e.on("snap.util.getattr.textpath",(function(){return e.stop(),this.textPath}))(-1),function(){function n(n){return function(){e.stop();var r=i.doc.defaultView.getComputedStyle(this.node,null).getPropertyValue("marker-"+n);return"none"==r?r:t(i.doc.getElementById(r.match(c)[1]))}}function r(t){return function(n){e.stop();var r="marker"+t.charAt(0).toUpperCase()+t.substring(1);if(""!=n&&n){if("marker"==n.type){var i=n.node.id;return i||f(n.node,{id:n.id}),void(this.node.style[r]=d(i))}}else this.node.style[r]="none"}}e.on("snap.util.getattr.marker-end",n("end"))(-1),e.on("snap.util.getattr.markerEnd",n("end"))(-1),e.on("snap.util.getattr.marker-start",n("start"))(-1),e.on("snap.util.getattr.markerStart",n("start"))(-1),e.on("snap.util.getattr.marker-mid",n("mid"))(-1),e.on("snap.util.getattr.markerMid",n("mid"))(-1),e.on("snap.util.attr.marker-end",r("end"))(-1),e.on("snap.util.attr.markerEnd",r("end"))(-1),e.on("snap.util.attr.marker-start",r("start"))(-1),e.on("snap.util.attr.markerStart",r("start"))(-1),e.on("snap.util.attr.marker-mid",r("mid"))(-1),e.on("snap.util.attr.markerMid",r("mid"))(-1)}(),e.on("snap.util.getattr.r",(function(){if("rect"==this.type&&f(this.node,"rx")==f(this.node,"ry"))return e.stop(),f(this.node,"rx")}))(-1),e.on("snap.util.getattr.text",(function(){if("text"==this.type||"tspan"==this.type){e.stop();var t=function t(e){for(var n=[],r=e.childNodes,i=0,o=r.length;i<o;i++){var a=r[i];3==a.nodeType&&n.push(a.nodeValue),"tspan"==a.tagName&&(1==a.childNodes.length&&3==a.firstChild.nodeType?n.push(a.firstChild.nodeValue):n.push(t(a)))}return n}(this.node);return 1==t.length?t[0]:t}}))(-1),e.on("snap.util.getattr.#text",(function(){return this.node.textContent}))(-1),e.on("snap.util.getattr.fill",(function(n){if(!n){e.stop();var r=e("snap.util.getattr.fill",this,!0).firstDefined();return t(t.deurl(r))||r}}))(-1),e.on("snap.util.getattr.stroke",(function(n){if(!n){e.stop();var r=e("snap.util.getattr.stroke",this,!0).firstDefined();return t(t.deurl(r))||r}}))(-1),e.on("snap.util.getattr.viewBox",(function(){e.stop();var n=f(this.node,"viewBox");return n?(n=n.split(g),t._.box(+n[0],+n[1],+n[2],+n[3])):void 0}))(-1),e.on("snap.util.getattr.points",(function(){var t=f(this.node,"points");return e.stop(),t?t.split(g):void 0}))(-1),e.on("snap.util.getattr.path",(function(){var t=f(this.node,"d");return e.stop(),t}))(-1),e.on("snap.util.getattr.class",(function(){return this.node.className.baseVal}))(-1),e.on("snap.util.getattr.fontSize",x)(-1),e.on("snap.util.getattr.font-size",x)(-1)})),r.plugin((function(t,e,n,r,i){var o=/\S+/g,a=String,s=e.prototype;s.addClass=function(t){var e,n,r,i=a(t||"").match(o)||[],s=this.node,l=s.className.baseVal,h=l.match(o)||[];if(i.length){for(e=0;n=i[e++];)~h.indexOf(n)||h.push(n);l!=(r=h.join(" "))&&(s.className.baseVal=r)}return this},s.removeClass=function(t){var e,n,r,i,s=a(t||"").match(o)||[],l=this.node,h=l.className.baseVal,u=h.match(o)||[];if(u.length){for(e=0;r=s[e++];)~(n=u.indexOf(r))&&u.splice(n,1);h!=(i=u.join(" "))&&(l.className.baseVal=i)}return this},s.hasClass=function(t){return!!~(this.node.className.baseVal.match(o)||[]).indexOf(t)},s.toggleClass=function(t,e){if(null!=e)return e?this.addClass(t):this.removeClass(t);var n,r,i,a,s=(t||"").match(o)||[],l=this.node,h=l.className.baseVal,u=h.match(o)||[];for(n=0;i=s[n++];)~(r=u.indexOf(i))?u.splice(r,1):u.push(i);return h!=(a=u.join(" "))&&(l.className.baseVal=a),this}})),r.plugin((function(t,n,r,i,o){var a={"+":function(t,e){return t+e},"-":function(t,e){return t-e},"/":function(t,e){return t/e},"*":function(t,e){return t*e}},s=String,l=/[a-z]+$/i,h=/^\s*([+\-\/*])\s*=\s*([\d.eE+\-]+)\s*([^\d\s]+)?\s*$/;function u(t){return t}function c(t){return function(e){return+e.toFixed(3)+t}}e.on("snap.util.attr",(function(t){var n=s(t).match(h);if(n){var r=e.nt(),i=r.substring(r.lastIndexOf(".")+1),o=this.attr(i),u={};e.stop();var c=n[3]||"",f=o.match(l),d=a[n[1]];if(f&&f==c?t=d(parseFloat(o),+n[2]):(o=this.asPX(i),t=d(this.asPX(i),this.asPX(i,n[2]+c))),isNaN(o)||isNaN(t))return;u[i]=t,this.attr(u)}}))(-10),e.on("snap.util.equal",(function(t,n){var r=s(this.attr(t)||""),i=s(n).match(h);if(i){e.stop();var o=i[3]||"",f=r.match(l),d=a[i[1]];return f&&f==o?{from:parseFloat(r),to:d(parseFloat(r),+i[2]),f:c(f)}:{from:r=this.asPX(t),to:d(r,this.asPX(t,i[2]+o)),f:u}}}))(-10)})),r.plugin((function(n,r,i,o,a){var s=i.prototype,l=n.is;s.rect=function(t,e,n,r,i,o){var a;return null==o&&(o=i),l(t,"object")&&"[object Object]"==t?a=t:null!=t&&(a={x:t,y:e,width:n,height:r},null!=i&&(a.rx=i,a.ry=o)),this.el("rect",a)},s.circle=function(t,e,n){var r;return l(t,"object")&&"[object Object]"==t?r=t:null!=t&&(r={cx:t,cy:e,r:n}),this.el("circle",r)};var h=function(){function t(){this.parentNode.removeChild(this)}return function(e,n){var r=o.doc.createElement("img"),i=o.doc.body;r.style.cssText="position:absolute;left:-9999em;top:-9999em",r.onload=function(){n.call(r),r.onload=r.onerror=null,i.removeChild(r)},r.onerror=t,i.appendChild(r),r.src=e}}();s.image=function(t,e,r,i,o){var a=this.el("image");if(l(t,"object")&&"src"in t)a.attr(t);else if(null!=t){var s={"xlink:href":t,preserveAspectRatio:"none"};null!=e&&null!=r&&(s.x=e,s.y=r),null!=i&&null!=o?(s.width=i,s.height=o):h(t,(function(){n._.$(a.node,{width:this.offsetWidth,height:this.offsetHeight})})),n._.$(a.node,s)}return a},s.ellipse=function(t,e,n,r){var i;return l(t,"object")&&"[object Object]"==t?i=t:null!=t&&(i={cx:t,cy:e,rx:n,ry:r}),this.el("ellipse",i)},s.path=function(t){var e;return l(t,"object")&&!l(t,"array")?e=t:t&&(e={d:t}),this.el("path",e)},s.group=s.g=function(t){var e=this.el("g");return 1==arguments.length&&t&&!t.type?e.attr(t):arguments.length&&e.add(Array.prototype.slice.call(arguments,0)),e},s.svg=function(t,e,n,r,i,o,a,s){var h={};return l(t,"object")&&null==e?h=t:(null!=t&&(h.x=t),null!=e&&(h.y=e),null!=n&&(h.width=n),null!=r&&(h.height=r),null!=i&&null!=o&&null!=a&&null!=s&&(h.viewBox=[i,o,a,s])),this.el("svg",h)},s.mask=function(t){var e=this.el("mask");return 1==arguments.length&&t&&!t.type?e.attr(t):arguments.length&&e.add(Array.prototype.slice.call(arguments,0)),e},s.ptrn=function(t,e,n,r,i,o,a,s){if(l(t,"object"))var h=t;else h={patternUnits:"userSpaceOnUse"},t&&(h.x=t),e&&(h.y=e),null!=n&&(h.width=n),null!=r&&(h.height=r),h.viewBox=null!=i&&null!=o&&null!=a&&null!=s?[i,o,a,s]:[t||0,e||0,n||0,r||0];return this.el("pattern",h)},s.use=function(t){return null!=t?(t instanceof r&&(t.attr("id")||t.attr({id:n._.id(t)}),t=t.attr("id")),"#"==String(t).charAt()&&(t=t.substring(1)),this.el("use",{"xlink:href":"#"+t})):r.prototype.use.call(this)},s.symbol=function(t,e,n,r){var i={};return null!=t&&null!=e&&null!=n&&null!=r&&(i.viewBox=[t,e,n,r]),this.el("symbol",i)},s.text=function(t,e,n){var r={};return l(t,"object")?r=t:null!=t&&(r={x:t,y:e,text:n||""}),this.el("text",r)},s.line=function(t,e,n,r){var i={};return l(t,"object")?i=t:null!=t&&(i={x1:t,x2:n,y1:e,y2:r}),this.el("line",i)},s.polyline=function(t){arguments.length>1&&(t=Array.prototype.slice.call(arguments,0));var e={};return l(t,"object")&&!l(t,"array")?e=t:null!=t&&(e={points:t}),this.el("polyline",e)},s.polygon=function(t){arguments.length>1&&(t=Array.prototype.slice.call(arguments,0));var e={};return l(t,"object")&&!l(t,"array")?e=t:null!=t&&(e={points:t}),this.el("polygon",e)},function(){var r=n._.$;function i(){return this.selectAll("stop")}function o(t,e){var i=r("stop"),o={offset:+e+"%"};t=n.color(t),o["stop-color"]=t.hex,t.opacity<1&&(o["stop-opacity"]=t.opacity),r(i,o);for(var a,s=this.stops(),l=0;l<s.length;l++)if(parseFloat(s[l].attr("offset"))>e){this.node.insertBefore(i,s[l].node),a=!0;break}return a||this.node.appendChild(i),this}function a(){if("linearGradient"==this.type){var t=r(this.node,"x1")||0,e=r(this.node,"x2")||1,i=r(this.node,"y1")||0,o=r(this.node,"y2")||0;return n._.box(t,i,math.abs(e-t),math.abs(o-i))}var a=this.node.cx||.5,s=this.node.cy||.5,l=this.node.r||0;return n._.box(a-l,s-l,2*l,2*l)}function l(t){var r=t,i=this.stops();if("string"==typeof t&&(r=e("snap.util.grad.parse",null,"l(0,0,0,1)"+t).firstDefined().stops),n.is(r,"array")){for(var o=0;o<i.length;o++)if(r[o]){var a=n.color(r[o].color),s={offset:r[o].offset+"%"};s["stop-color"]=a.hex,a.opacity<1&&(s["stop-opacity"]=a.opacity),i[o].attr(s)}else i[o].remove();for(o=i.length;o<r.length;o++)this.addStop(r[o].color,r[o].offset);return this}}function h(t,e,s,h,u){var c=n._.make("linearGradient",t);return c.stops=i,c.addStop=o,c.getBBox=a,c.setStops=l,null!=e&&r(c.node,{x1:e,y1:s,x2:h,y2:u}),c}function u(t,e,s,l,h,u){var c=n._.make("radialGradient",t);return c.stops=i,c.addStop=o,c.getBBox=a,null!=e&&r(c.node,{cx:e,cy:s,r:l}),null!=h&&null!=u&&r(c.node,{fx:h,fy:u}),c}s.gradient=function(t){return function(t,n){var i,o=e("snap.util.grad.parse",null,n).firstDefined();if(!o)return null;o.params.unshift(t),i="l"==o.type.toLowerCase()?h.apply(0,o.params):u.apply(0,o.params),o.type!=o.type.toLowerCase()&&r(i.node,{gradientUnits:"userSpaceOnUse"});for(var a=o.stops,s=a.length,l=0;l<s;l++){var c=a[l];i.addStop(c.color,c.offset)}return i}(this.defs,t)},s.gradientLinear=function(t,e,n,r){return h(this.defs,t,e,n,r)},s.gradientRadial=function(t,e,n,r,i){return u(this.defs,t,e,n,r,i)},s.toString=function(){var t,e=this.node.ownerDocument,r=e.createDocumentFragment(),i=e.createElement("div"),o=this.node.cloneNode(!0);return r.appendChild(i),i.appendChild(o),n._.$(o,{xmlns:"http://www.w3.org/2000/svg"}),t=i.innerHTML,r.removeChild(r.firstChild),t},s.toDataURL=function(){if(t&&t.btoa)return"data:image/svg+xml;base64,"+btoa(unescape(encodeURIComponent(this)))},s.clear=function(){for(var t,e=this.node.firstChild;e;)t=e.nextSibling,"defs"!=e.tagName?e.parentNode.removeChild(e):s.clear.call({node:e}),e=t}}()})),r.plugin((function(t,e,n,r){var i=e.prototype,o=t.is,a=t._.clone,s=/,?([a-z]),?/gi,l=parseFloat,h=Math,u=h.PI,c=h.min,f=h.max,d=h.pow,p=h.abs;function g(t){var e=g.ps=g.ps||{};return e[t]?e[t].sleep=100:e[t]={sleep:100},setTimeout((function(){for(var n in e)e.hasOwnProperty(n)&&n!=t&&(e[n].sleep--,!e[n].sleep&&delete e[n])})),e[t]}function m(t,e,n,r){return null==t&&(t=e=n=r=0),null==e&&(e=t.y,n=t.width,r=t.height,t=t.x),{x:t,y:e,width:n,w:n,height:r,h:r,x2:t+n,y2:e+r,cx:t+n/2,cy:e+r/2,r1:h.min(n,r)/2,r2:h.max(n,r)/2,r0:h.sqrt(n*n+r*r)/2,path:L(t,e,n,r),vb:[t,e,n,r].join(" ")}}function v(){return this.join(",").replace(s,"$1")}function y(t){var e=a(t);return e.toString=v,e}function x(t,e,n,r,i,o,a,s,l){return null==l?D(t,e,n,r,i,o,a,s):k(t,e,n,r,i,o,a,s,function(t,e,n,r,i,o,a,s,l){if(!(l<0||D(t,e,n,r,i,o,a,s)<l)){var h,u=.5,c=1-u;for(h=D(t,e,n,r,i,o,a,s,c);p(h-l)>.01;)h=D(t,e,n,r,i,o,a,s,c+=(h<l?1:-1)*(u/=2));return c}}(t,e,n,r,i,o,a,s,l))}function b(n,r){function i(t){return+(+t).toFixed(3)}return t._.cacher((function(t,o,a){t instanceof e&&(t=t.attr("d"));for(var s,l,h,u,c,f="",d={},p=0,g=0,m=(t=R(t)).length;g<m;g++){if("M"==(h=t[g])[0])s=+h[1],l=+h[2];else{if(p+(u=x(s,l,h[1],h[2],h[3],h[4],h[5],h[6]))>o){if(r&&!d.start){if(f+=["C"+i((c=x(s,l,h[1],h[2],h[3],h[4],h[5],h[6],o-p)).start.x),i(c.start.y),i(c.m.x),i(c.m.y),i(c.x),i(c.y)],a)return f;d.start=f,f=["M"+i(c.x),i(c.y)+"C"+i(c.n.x),i(c.n.y),i(c.end.x),i(c.end.y),i(h[5]),i(h[6])].join(),p+=u,s=+h[5],l=+h[6];continue}if(!n&&!r)return c=x(s,l,h[1],h[2],h[3],h[4],h[5],h[6],o-p)}p+=u,s=+h[5],l=+h[6]}f+=h.shift()+h}return d.end=f,c=n?p:r?d:k(s,l,h[0],h[1],h[2],h[3],h[4],h[5],1)}),null,t._.clone)}var F=b(1),w=b(),C=b(0,1);function k(t,e,n,r,i,o,a,s,l){var c=1-l,f=d(c,3),p=d(c,2),g=l*l,m=g*l,v=t+2*l*(n-t)+g*(i-2*n+t),y=e+2*l*(r-e)+g*(o-2*r+e),x=n+2*l*(i-n)+g*(a-2*i+n),b=r+2*l*(o-r)+g*(s-2*o+r);return{x:f*t+3*p*l*n+3*c*l*l*i+m*a,y:f*e+3*p*l*r+3*c*l*l*o+m*s,m:{x:v,y:y},n:{x:x,y:b},start:{x:c*t+l*n,y:c*e+l*r},end:{x:c*i+l*a,y:c*o+l*s},alpha:90-180*h.atan2(v-x,y-b)/u}}function S(e,n,r,i,o,a,s,l){t.is(e,"array")||(e=[e,n,r,i,o,a,s,l]);var h=G.apply(null,e);return m(h.min.x,h.min.y,h.max.x-h.min.x,h.max.y-h.min.y)}function E(t,e,n){return e>=t.x&&e<=t.x+t.width&&n>=t.y&&n<=t.y+t.height}function B(t,e){return t=m(t),E(e=m(e),t.x,t.y)||E(e,t.x2,t.y)||E(e,t.x,t.y2)||E(e,t.x2,t.y2)||E(t,e.x,e.y)||E(t,e.x2,e.y)||E(t,e.x,e.y2)||E(t,e.x2,e.y2)||(t.x<e.x2&&t.x>e.x||e.x<t.x2&&e.x>t.x)&&(t.y<e.y2&&t.y>e.y||e.y<t.y2&&e.y>t.y)}function A(t,e,n,r,i){return t*(t*(-3*e+9*n-9*r+3*i)+6*e-12*n+6*r)-3*e+3*n}function D(t,e,n,r,i,o,a,s,l){null==l&&(l=1);for(var u=(l=l>1?1:l<0?0:l)/2,c=[-.1252,.1252,-.3678,.3678,-.5873,.5873,-.7699,.7699,-.9041,.9041,-.9816,.9816],f=[.2491,.2491,.2335,.2335,.2032,.2032,.1601,.1601,.1069,.1069,.0472,.0472],d=0,p=0;p<12;p++){var g=u*c[p]+u,m=A(g,t,n,i,a),v=A(g,e,r,o,s),y=m*m+v*v;d+=f[p]*h.sqrt(y)}return u*d}function M(t,e,n,r,i,o,a,s){if(!(f(t,n)<c(i,a)||c(t,n)>f(i,a)||f(e,r)<c(o,s)||c(e,r)>f(o,s))){var l=(t-n)*(o-s)-(e-r)*(i-a);if(l){var h=((t*r-e*n)*(i-a)-(t-n)*(i*s-o*a))/l,u=((t*r-e*n)*(o-s)-(e-r)*(i*s-o*a))/l,d=+h.toFixed(2),p=+u.toFixed(2);if(!(d<+c(t,n).toFixed(2)||d>+f(t,n).toFixed(2)||d<+c(i,a).toFixed(2)||d>+f(i,a).toFixed(2)||p<+c(e,r).toFixed(2)||p>+f(e,r).toFixed(2)||p<+c(o,s).toFixed(2)||p>+f(o,s).toFixed(2)))return{x:h,y:u}}}}function N(t,e,n){if(!B(S(t),S(e)))return n?0:[];for(var r=~~(D.apply(0,t)/8),i=~~(D.apply(0,e)/8),o=[],a=[],s={},l=n?0:[],h=0;h<r+1;h++){var u=k.apply(0,t.concat(h/r));o.push({x:u.x,y:u.y,t:h/r})}for(h=0;h<i+1;h++)u=k.apply(0,e.concat(h/i)),a.push({x:u.x,y:u.y,t:h/i});for(h=0;h<r;h++)for(var c=0;c<i;c++){var f=o[h],d=o[h+1],g=a[c],m=a[c+1],v=p(d.x-f.x)<.001?"y":"x",y=p(m.x-g.x)<.001?"y":"x",x=M(f.x,f.y,d.x,d.y,g.x,g.y,m.x,m.y);if(x){if(s[x.x.toFixed(4)]==x.y.toFixed(4))continue;s[x.x.toFixed(4)]=x.y.toFixed(4);var b=f.t+p((x[v]-f[v])/(d[v]-f[v]))*(d.t-f.t),F=g.t+p((x[y]-g[y])/(m[y]-g[y]))*(m.t-g.t);b>=0&&b<=1&&F>=0&&F<=1&&(n?l++:l.push({x:x.x,y:x.y,t1:b,t2:F}))}}return l}function _(t,e,n){t=R(t),e=R(e);for(var r,i,o,a,s,l,h,u,c,f,d=n?0:[],p=0,g=t.length;p<g;p++){var m=t[p];if("M"==m[0])r=s=m[1],i=l=m[2];else{"C"==m[0]?(c=[r,i].concat(m.slice(1)),r=c[6],i=c[7]):(c=[r,i,r,i,s,l,s,l],r=s,i=l);for(var v=0,y=e.length;v<y;v++){var x=e[v];if("M"==x[0])o=h=x[1],a=u=x[2];else{"C"==x[0]?(f=[o,a].concat(x.slice(1)),o=f[6],a=f[7]):(f=[o,a,o,a,h,u,h,u],o=h,a=u);var b=N(c,f,n);if(n)d+=b;else{for(var F=0,w=b.length;F<w;F++)b[F].segment1=p,b[F].segment2=v,b[F].bez1=c,b[F].bez2=f;d=d.concat(b)}}}}}return d}function T(t){var e=g(t);if(e.bbox)return a(e.bbox);if(!t)return m();for(var n,r=0,i=0,o=[],s=[],l=0,h=(t=R(t)).length;l<h;l++)if("M"==(n=t[l])[0])r=n[1],i=n[2],o.push(r),s.push(i);else{var u=G(r,i,n[1],n[2],n[3],n[4],n[5],n[6]);o=o.concat(u.min.x,u.max.x),s=s.concat(u.min.y,u.max.y),r=n[5],i=n[6]}var d=c.apply(0,o),p=c.apply(0,s),v=m(d,p,f.apply(0,o)-d,f.apply(0,s)-p);return e.bbox=a(v),v}function L(t,e,n,r,i){if(i)return[["M",+t+ +i,e],["l",n-2*i,0],["a",i,i,0,0,1,i,i],["l",0,r-2*i],["a",i,i,0,0,1,-i,i],["l",2*i-n,0],["a",i,i,0,0,1,-i,-i],["l",0,2*i-r],["a",i,i,0,0,1,i,-i],["z"]];var o=[["M",t,e],["l",n,0],["l",0,r],["l",-n,0],["z"]];return o.toString=v,o}function P(t,e,n,r,i){if(null==i&&null==r&&(r=n),t=+t,e=+e,n=+n,r=+r,null!=i)var o=Math.PI/180,a=t+n*Math.cos(-r*o),s=t+n*Math.cos(-i*o),l=[["M",a,e+n*Math.sin(-r*o)],["A",n,n,0,+(i-r>180),0,s,e+n*Math.sin(-i*o)]];else l=[["M",t,e],["m",0,-r],["a",n,r,0,1,1,0,2*r],["a",n,r,0,1,1,0,-2*r],["z"]];return l.toString=v,l}var z=t._unit2px,j={path:function(t){return t.attr("path")},circle:function(t){var e=z(t);return P(e.cx,e.cy,e.r)},ellipse:function(t){var e=z(t);return P(e.cx||0,e.cy||0,e.rx,e.ry)},rect:function(t){var e=z(t);return L(e.x||0,e.y||0,e.width,e.height,e.rx,e.ry)},image:function(t){var e=z(t);return L(e.x||0,e.y||0,e.width,e.height)},line:function(t){return"M"+[t.attr("x1")||0,t.attr("y1")||0,t.attr("x2"),t.attr("y2")]},polyline:function(t){return"M"+t.attr("points")},polygon:function(t){return"M"+t.attr("points")+"z"},deflt:function(t){var e=t.node.getBBox();return L(e.x,e.y,e.width,e.height)}};function q(e){var n=g(e);if(n.abs)return y(n.abs);if(o(e,"array")&&o(e&&e[0],"array")||(e=t.parsePathString(e)),!e||!e.length)return[["M",0,0]];var r,i=[],a=0,s=0,l=0,h=0,u=0;"M"==e[0][0]&&(l=a=+e[0][1],h=s=+e[0][2],u++,i[0]=["M",a,s]);for(var c,f,d=3==e.length&&"M"==e[0][0]&&"R"==e[1][0].toUpperCase()&&"Z"==e[2][0].toUpperCase(),p=u,m=e.length;p<m;p++){if(i.push(c=[]),(r=(f=e[p])[0])!=r.toUpperCase())switch(c[0]=r.toUpperCase(),c[0]){case"A":c[1]=f[1],c[2]=f[2],c[3]=f[3],c[4]=f[4],c[5]=f[5],c[6]=+f[6]+a,c[7]=+f[7]+s;break;case"V":c[1]=+f[1]+s;break;case"H":c[1]=+f[1]+a;break;case"R":for(var x=[a,s].concat(f.slice(1)),b=2,F=x.length;b<F;b++)x[b]=+x[b]+a,x[++b]=+x[b]+s;i.pop(),i=i.concat(X(x,d));break;case"O":i.pop(),(x=P(a,s,f[1],f[2])).push(x[0]),i=i.concat(x);break;case"U":i.pop(),i=i.concat(P(a,s,f[1],f[2],f[3])),c=["U"].concat(i[i.length-1].slice(-2));break;case"M":l=+f[1]+a,h=+f[2]+s;default:for(b=1,F=f.length;b<F;b++)c[b]=+f[b]+(b%2?a:s)}else if("R"==r)x=[a,s].concat(f.slice(1)),i.pop(),i=i.concat(X(x,d)),c=["R"].concat(f.slice(-2));else if("O"==r)i.pop(),(x=P(a,s,f[1],f[2])).push(x[0]),i=i.concat(x);else if("U"==r)i.pop(),i=i.concat(P(a,s,f[1],f[2],f[3])),c=["U"].concat(i[i.length-1].slice(-2));else for(var w=0,C=f.length;w<C;w++)c[w]=f[w];if("O"!=(r=r.toUpperCase()))switch(c[0]){case"Z":a=+l,s=+h;break;case"H":a=c[1];break;case"V":s=c[1];break;case"M":l=c[c.length-2],h=c[c.length-1];default:a=c[c.length-2],s=c[c.length-1]}}return i.toString=v,n.abs=y(i),i}function O(t,e,n,r){return[t,e,n,r,n,r]}function V(t,e,n,r,i,o){return[1/3*t+2/3*n,1/3*e+2/3*r,1/3*i+2/3*n,1/3*o+2/3*r,i,o]}function I(e,n,r,i,o,a,s,l,c,f){var d,g=120*u/180,m=u/180*(+o||0),v=[],y=t._.cacher((function(t,e,n){return{x:t*h.cos(n)-e*h.sin(n),y:t*h.sin(n)+e*h.cos(n)}}));if(!r||!i)return[e,n,l,c,l,c];if(f)B=f[0],A=f[1],S=f[2],E=f[3];else{e=(d=y(e,n,-m)).x,n=d.y,l=(d=y(l,c,-m)).x,c=d.y,h.cos(u/180*o),h.sin(u/180*o);var x=(e-l)/2,b=(n-c)/2,F=x*x/(r*r)+b*b/(i*i);F>1&&(r*=F=h.sqrt(F),i*=F);var w=r*r,C=i*i,k=(a==s?-1:1)*h.sqrt(p((w*C-w*b*b-C*x*x)/(w*b*b+C*x*x))),S=k*r*b/i+(e+l)/2,E=k*-i*x/r+(n+c)/2,B=h.asin(((n-E)/i).toFixed(9)),A=h.asin(((c-E)/i).toFixed(9));(B=e<S?u-B:B)<0&&(B=2*u+B),(A=l<S?u-A:A)<0&&(A=2*u+A),s&&B>A&&(B-=2*u),!s&&A>B&&(A-=2*u)}var D=A-B;if(p(D)>g){var M=A,N=l,_=c;A=B+g*(s&&A>B?1:-1),v=I(l=S+r*h.cos(A),c=E+i*h.sin(A),r,i,o,0,s,N,_,[A,M,S,E])}D=A-B;var T=h.cos(B),L=h.sin(B),P=h.cos(A),z=h.sin(A),j=h.tan(D/4),q=4/3*r*j,O=4/3*i*j,V=[e,n],G=[e+q*L,n-O*T],R=[l+q*z,c-O*P],X=[l,c];if(G[0]=2*V[0]-G[0],G[1]=2*V[1]-G[1],f)return[G,R,X].concat(v);for(var $=[],U=0,H=(v=[G,R,X].concat(v).join().split(",")).length;U<H;U++)$[U]=U%2?y(v[U-1],v[U],m).y:y(v[U],v[U+1],m).x;return $}function G(t,e,n,r,i,o,a,s){for(var l,u,d,g,m,v,y,x,b=[],F=[[],[]],w=0;w<2;++w)if(0==w?(u=6*t-12*n+6*i,l=-3*t+9*n-9*i+3*a,d=3*n-3*t):(u=6*e-12*r+6*o,l=-3*e+9*r-9*o+3*s,d=3*r-3*e),p(l)<1e-12){if(p(u)<1e-12)continue;0<(g=-d/u)&&g<1&&b.push(g)}else y=u*u-4*d*l,x=h.sqrt(y),y<0||(0<(m=(-u+x)/(2*l))&&m<1&&b.push(m),0<(v=(-u-x)/(2*l))&&v<1&&b.push(v));for(var C,k=b.length,S=k;k--;)C=1-(g=b[k]),F[0][k]=C*C*C*t+3*C*C*g*n+3*C*g*g*i+g*g*g*a,F[1][k]=C*C*C*e+3*C*C*g*r+3*C*g*g*o+g*g*g*s;return F[0][S]=t,F[1][S]=e,F[0][S+1]=a,F[1][S+1]=s,F[0].length=F[1].length=S+2,{min:{x:c.apply(0,F[0]),y:c.apply(0,F[1])},max:{x:f.apply(0,F[0]),y:f.apply(0,F[1])}}}function R(t,e){var n=!e&&g(t);if(!e&&n.curve)return y(n.curve);for(var r=q(t),i=e&&q(e),o={x:0,y:0,bx:0,by:0,X:0,Y:0,qx:null,qy:null},a={x:0,y:0,bx:0,by:0,X:0,Y:0,qx:null,qy:null},s=function(t,e,n){var r,i;if(!t)return["C",e.x,e.y,e.x,e.y,e.x,e.y];switch(!(t[0]in{T:1,Q:1})&&(e.qx=e.qy=null),t[0]){case"M":e.X=t[1],e.Y=t[2];break;case"A":t=["C"].concat(I.apply(0,[e.x,e.y].concat(t.slice(1))));break;case"S":"C"==n||"S"==n?(r=2*e.x-e.bx,i=2*e.y-e.by):(r=e.x,i=e.y),t=["C",r,i].concat(t.slice(1));break;case"T":"Q"==n||"T"==n?(e.qx=2*e.x-e.qx,e.qy=2*e.y-e.qy):(e.qx=e.x,e.qy=e.y),t=["C"].concat(V(e.x,e.y,e.qx,e.qy,t[1],t[2]));break;case"Q":e.qx=t[1],e.qy=t[2],t=["C"].concat(V(e.x,e.y,t[1],t[2],t[3],t[4]));break;case"L":t=["C"].concat(O(e.x,e.y,t[1],t[2]));break;case"H":t=["C"].concat(O(e.x,e.y,t[1],e.y));break;case"V":t=["C"].concat(O(e.x,e.y,e.x,t[1]));break;case"Z":t=["C"].concat(O(e.x,e.y,e.X,e.Y))}return t},h=function(t,e){if(t[e].length>7){t[e].shift();for(var n=t[e];n.length;)c[e]="A",i&&(d[e]="A"),t.splice(e++,0,["C"].concat(n.splice(0,6)));t.splice(e,1),x=f(r.length,i&&i.length||0)}},u=function(t,e,n,o,a){t&&e&&"M"==t[a][0]&&"M"!=e[a][0]&&(e.splice(a,0,["M",o.x,o.y]),n.bx=0,n.by=0,n.x=t[a][1],n.y=t[a][2],x=f(r.length,i&&i.length||0))},c=[],d=[],p="",m="",v=0,x=f(r.length,i&&i.length||0);v<x;v++){r[v]&&(p=r[v][0]),"C"!=p&&(c[v]=p,v&&(m=c[v-1])),r[v]=s(r[v],o,m),"A"!=c[v]&&"C"==p&&(c[v]="C"),h(r,v),i&&(i[v]&&(p=i[v][0]),"C"!=p&&(d[v]=p,v&&(m=d[v-1])),i[v]=s(i[v],a,m),"A"!=d[v]&&"C"==p&&(d[v]="C"),h(i,v)),u(r,i,o,a,v),u(i,r,a,o,v);var b=r[v],F=i&&i[v],w=b.length,C=i&&F.length;o.x=b[w-2],o.y=b[w-1],o.bx=l(b[w-4])||o.x,o.by=l(b[w-3])||o.y,a.bx=i&&(l(F[C-4])||a.x),a.by=i&&(l(F[C-3])||a.y),a.x=i&&F[C-2],a.y=i&&F[C-1]}return i||(n.curve=y(r)),i?[r,i]:r}function X(t,e){for(var n=[],r=0,i=t.length;i-2*!e>r;r+=2){var o=[{x:+t[r-2],y:+t[r-1]},{x:+t[r],y:+t[r+1]},{x:+t[r+2],y:+t[r+3]},{x:+t[r+4],y:+t[r+5]}];e?r?i-4==r?o[3]={x:+t[0],y:+t[1]}:i-2==r&&(o[2]={x:+t[0],y:+t[1]},o[3]={x:+t[2],y:+t[3]}):o[0]={x:+t[i-2],y:+t[i-1]}:i-4==r?o[3]=o[2]:r||(o[0]={x:+t[r],y:+t[r+1]}),n.push(["C",(-o[0].x+6*o[1].x+o[2].x)/6,(-o[0].y+6*o[1].y+o[2].y)/6,(o[1].x+6*o[2].x-o[3].x)/6,(o[1].y+6*o[2].y-o[3].y)/6,o[2].x,o[2].y])}return n}t.path=g,t.path.getTotalLength=F,t.path.getPointAtLength=w,t.path.getSubpath=function(t,e,n){if(this.getTotalLength(t)-n<1e-6)return C(t,e).end;var r=C(t,n,1);return e?C(r,e).end:r},i.getTotalLength=function(){if(this.node.getTotalLength)return this.node.getTotalLength()},i.getPointAtLength=function(t){return w(this.attr("d"),t)},i.getSubpath=function(e,n){return t.path.getSubpath(this.attr("d"),e,n)},t._.box=m,t.path.findDotsAtSegment=k,t.path.bezierBBox=S,t.path.isPointInsideBBox=E,t.closest=function(e,n,r,i){for(var o=100,a=m(e-o/2,n-o/2,o,o),s=[],l=r[0].hasOwnProperty("x")?function(t){return{x:r[t].x,y:r[t].y}}:function(t){return{x:r[t],y:i[t]}},h=0;o<=1e6&&!h;){for(var u=0,c=r.length;u<c;u++){var f=l(u);if(E(a,f.x,f.y)){h++,s.push(f);break}}h||(a=m(e-(o*=2)/2,n-o/2,o,o))}if(1e6!=o){var d,p=1/0;for(u=0,c=s.length;u<c;u++){var g=t.len(e,n,s[u].x,s[u].y);p>g&&(p=g,s[u].len=g,d=s[u])}return d}},t.path.isBBoxIntersect=B,t.path.intersection=function(t,e){return _(t,e)},t.path.intersectionNumber=function(t,e){return _(t,e,1)},t.path.isPointInside=function(t,e,n){var r=T(t);return E(r,e,n)&&_(t,[["M",e,n],["H",r.x2+10]],1)%2==1},t.path.getBBox=T,t.path.get=j,t.path.toRelative=function(e){var n=g(e),r=String.prototype.toLowerCase;if(n.rel)return y(n.rel);t.is(e,"array")&&t.is(e&&e[0],"array")||(e=t.parsePathString(e));var i=[],o=0,a=0,s=0,l=0,h=0;"M"==e[0][0]&&(s=o=e[0][1],l=a=e[0][2],h++,i.push(["M",o,a]));for(var u=h,c=e.length;u<c;u++){var f=i[u]=[],d=e[u];if(d[0]!=r.call(d[0]))switch(f[0]=r.call(d[0]),f[0]){case"a":f[1]=d[1],f[2]=d[2],f[3]=d[3],f[4]=d[4],f[5]=d[5],f[6]=+(d[6]-o).toFixed(3),f[7]=+(d[7]-a).toFixed(3);break;case"v":f[1]=+(d[1]-a).toFixed(3);break;case"m":s=d[1],l=d[2];default:for(var p=1,m=d.length;p<m;p++)f[p]=+(d[p]-(p%2?o:a)).toFixed(3)}else{f=i[u]=[],"m"==d[0]&&(s=d[1]+o,l=d[2]+a);for(var x=0,b=d.length;x<b;x++)i[u][x]=d[x]}var F=i[u].length;switch(i[u][0]){case"z":o=s,a=l;break;case"h":o+=+i[u][F-1];break;case"v":a+=+i[u][F-1];break;default:o+=+i[u][F-2],a+=+i[u][F-1]}}return i.toString=v,n.rel=y(i),i},t.path.toAbsolute=q,t.path.toCubic=R,t.path.map=function(t,e){if(!e)return t;var n,r,i,o,a,s,l;for(i=0,a=(t=R(t)).length;i<a;i++)for(o=1,s=(l=t[i]).length;o<s;o+=2)n=e.x(l[o],l[o+1]),r=e.y(l[o],l[o+1]),l[o]=n,l[o+1]=r;return t},t.path.toString=v,t.path.clone=y})),r.plugin((function(t,r,i,o){var a=Math.max,s=Math.min,l=function(t){if(this.items=[],this.bindings={},this.length=0,this.type="set",t)for(var e=0,n=t.length;e<n;e++)t[e]&&(this[this.items.length]=this.items[this.items.length]=t[e],this.length++)},h=l.prototype;h.push=function(){for(var t,e,n=0,r=arguments.length;n<r;n++)(t=arguments[n])&&(this[e=this.items.length]=this.items[e]=t,this.length++);return this},h.pop=function(){return this.length&&delete this[this.length--],this.items.pop()},h.forEach=function(t,e){for(var n=0,r=this.items.length;n<r;n++)if(!1===t.call(e,this.items[n],n))return this;return this},h.animate=function(r,i,o,a){"function"!=typeof o||o.length||(a=o,o=n.linear),r instanceof t._.Animation&&(a=r.callback,o=r.easing,i=o.dur,r=r.attr);var s=arguments;if(t.is(r,"array")&&t.is(s[s.length-1],"array"))var l=!0;var h,u=function(){h?this.b=h:h=this.b},c=0,f=this,d=a&&function(){++c==f.length&&a.call(this)};return this.forEach((function(t,n){e.once("snap.animcreated."+t.id,u),l?s[n]&&t.animate.apply(t,s[n]):t.animate(r,i,o,d)}))},h.remove=function(){for(;this.length;)this.pop().remove();return this},h.bind=function(t,e,n){var r={};if("function"==typeof e)this.bindings[t]=e;else{var i=n||t;this.bindings[t]=function(t){r[i]=t,e.attr(r)}}return this},h.attr=function(t){var e={};for(var n in t)this.bindings[n]?this.bindings[n](t[n]):e[n]=t[n];for(var r=0,i=this.items.length;r<i;r++)this.items[r].attr(e);return this},h.clear=function(){for(;this.length;)this.pop()},h.splice=function(t,e,n){t=t<0?a(this.length+t,0):t,e=a(0,s(this.length-t,e));var r,i=[],o=[],h=[];for(r=2;r<arguments.length;r++)h.push(arguments[r]);for(r=0;r<e;r++)o.push(this[t+r]);for(;r<this.length-t;r++)i.push(this[t+r]);var u=h.length;for(r=0;r<u+i.length;r++)this.items[t+r]=this[t+r]=r<u?h[r]:i[r-u];for(r=this.items.length=this.length-=e-u;this[r];)delete this[r++];return new l(o)},h.exclude=function(t){for(var e=0,n=this.length;e<n;e++)if(this[e]==t)return this.splice(e,1),!0;return!1},h.insertAfter=function(t){for(var e=this.items.length;e--;)this.items[e].insertAfter(t);return this},h.getBBox=function(){for(var t=[],e=[],n=[],r=[],i=this.items.length;i--;)if(!this.items[i].removed){var o=this.items[i].getBBox();t.push(o.x),e.push(o.y),n.push(o.x+o.width),r.push(o.y+o.height)}return{x:t=s.apply(0,t),y:e=s.apply(0,e),x2:n=a.apply(0,n),y2:r=a.apply(0,r),width:n-t,height:r-e,cx:t+(n-t)/2,cy:e+(r-e)/2}},h.clone=function(t){t=new l;for(var e=0,n=this.items.length;e<n;e++)t.push(this.items[e].clone());return t},h.toString=function(){return"Snap‘s set"},h.type="set",t.Set=l,t.set=function(){var t=new l;return arguments.length&&t.push.apply(t,Array.prototype.slice.call(arguments,0)),t}})),r.plugin((function(t,n,r,i){var o={},a=/[%a-z]+$/i,s=String;function l(t){var e=t[0];switch(e.toLowerCase()){case"t":return[e,0,0];case"m":return[e,1,0,0,1,0,0];case"r":return 4==t.length?[e,0,t[2],t[3]]:[e,0];case"s":return 5==t.length?[e,1,1,t[3],t[4]]:3==t.length?[e,1,1]:[e,1]}}function h(t){return t}function u(t){return t.join(" ")}function c(e){return t.rgb(e[0],e[1],e[2],e[3])}function f(t){var e,n,r,i,o,a,s=0,l=[];for(e=0,n=t.length;e<n;e++){for(o="[",a=['"'+t[e][0]+'"'],r=1,i=t[e].length;r<i;r++)a[r]="val["+s+++"]";o+=a+"]",l[e]=o}return Function("val","return Snap.path.toString.call(["+l+"])")}function d(t){for(var e=[],n=0,r=t.length;n<r;n++)for(var i=1,o=t[n].length;i<o;i++)e.push(t[n][i]);return e}function p(t){return isFinite(t)}o.stroke=o.fill="colour",n.prototype.equal=function(t,n){return e("snap.util.equal",this,t,n).firstDefined()},e.on("snap.util.equal",(function(e,n){var r,i,g=s(this.attr(e)||""),m=this;if("colour"==o[e])return r=t.color(g),i=t.color(n),{from:[r.r,r.g,r.b,r.opacity],to:[i.r,i.g,i.b,i.opacity],f:c};if("viewBox"==e)return{from:r=this.attr(e).vb.split(" ").map(Number),to:i=n.split(" ").map(Number),f:u};if("transform"==e||"gradientTransform"==e||"patternTransform"==e)return"string"==typeof n&&(n=s(n).replace(/\.{3}|\u2026/g,g)),function(e,n,r){e=e||new t.Matrix,n=n||new t.Matrix,e=t.parseTransformString(e.toTransformString())||[],n=t.parseTransformString(n.toTransformString())||[];for(var i,o,a,s,h=Math.max(e.length,n.length),u=[],c=[],p=0;p<h;p++){if(a=e[p]||l(n[p]),s=n[p]||l(a),a[0]!=s[0]||"r"==a[0].toLowerCase()&&(a[2]!=s[2]||a[3]!=s[3])||"s"==a[0].toLowerCase()&&(a[3]!=s[3]||a[4]!=s[4])){e=t._.transform2matrix(e,r()),n=t._.transform2matrix(n,r()),u=[["m",e.a,e.b,e.c,e.d,e.e,e.f]],c=[["m",n.a,n.b,n.c,n.d,n.e,n.f]];break}for(u[p]=[],c[p]=[],i=0,o=Math.max(a.length,s.length);i<o;i++)i in a&&(u[p][i]=a[i]),i in s&&(c[p][i]=s[i])}return{from:d(u),to:d(c),f:f(u)}}(g=this.matrix,n=t._.rgTransform.test(n)?t._.transform2matrix(n,this.getBBox()):t._.transform2matrix(t._.svgTransform2string(n),this.getBBox()),(function(){return m.getBBox(1)}));if("d"==e||"path"==e)return{from:d((r=t.path.toCubic(g,n))[0]),to:d(r[1]),f:f(r[0])};if("points"==e)return{from:r=s(g).split(t._.separator),to:i=s(n).split(t._.separator),f:function(t){return t}};if(p(g)&&p(n))return{from:parseFloat(g),to:parseFloat(n),f:h};var v,y,x,b=g.match(a),F=s(n).match(a);return b&&(y=b,x=F,t.is(y,"array")&&t.is(x,"array")&&y.toString()==x.toString())?{from:parseFloat(g),to:parseFloat(n),f:(v=b,function(t){return+t.toFixed(3)+v})}:{from:this.asPX(e),to:this.asPX(e,n),f:h}}))})),r.plugin((function(t,n,r,i){for(var o=n.prototype,a=("createTouch"in i.doc),s=["click","dblclick","mousedown","mousemove","mouseout","mouseover","mouseup","touchstart","touchmove","touchend","touchcancel"],l={mousedown:"touchstart",mousemove:"touchmove",mouseup:"touchend"},h=function(t,e){var n="y"==t?"scrollTop":"scrollLeft",r=e&&e.node?e.node.ownerDocument:i.doc;return r[n in r.documentElement?"documentElement":"body"][n]},u=function(){return this.originalEvent.preventDefault()},c=function(){return this.originalEvent.stopPropagation()},f=function(t,e,n,r){var i=a&&l[e]?l[e]:e,o=function(i){var o=h("y",r),s=h("x",r);if(a&&l.hasOwnProperty(e))for(var f=0,d=i.targetTouches&&i.targetTouches.length;f<d;f++)if(i.targetTouches[f].target==t||t.contains(i.targetTouches[f].target)){var p=i;(i=i.targetTouches[f]).originalEvent=p,i.preventDefault=u,i.stopPropagation=c;break}var g=i.clientX+s,m=i.clientY+o;return n.call(r,i,g,m)};return e!==i&&t.addEventListener(e,o,!1),t.addEventListener(i,o,!1),function(){return e!==i&&t.removeEventListener(e,o,!1),t.removeEventListener(i,o,!1),!0}},d=[],p=function(t){for(var n,r=t.clientX,i=t.clientY,o=h("y"),s=h("x"),l=d.length;l--;){if(n=d[l],a){for(var u,c=t.touches&&t.touches.length;c--;)if((u=t.touches[c]).identifier==n.el._drag.id||n.el.node.contains(u.target)){r=u.clientX,i=u.clientY,(t.originalEvent?t.originalEvent:t).preventDefault();break}}else t.preventDefault();var f=n.el.node;f.nextSibling,f.parentNode,f.style.display,r+=s,i+=o,e("snap.drag.move."+n.el.id,n.move_scope||n.el,r-n.el._drag.x,i-n.el._drag.y,r,i,t)}},g=function(n){t.unmousemove(p).unmouseup(g);for(var r,i=d.length;i--;)(r=d[i]).el._drag={},e("snap.drag.end."+r.el.id,r.end_scope||r.start_scope||r.move_scope||r.el,n),e.off("snap.drag.*."+r.el.id);d=[]},m=s.length;m--;)!function(e){t[e]=o[e]=function(n,r){if(t.is(n,"function"))this.events=this.events||[],this.events.push({name:e,f:n,unbind:f(this.node||document,e,n,r||this)});else for(var i=0,o=this.events.length;i<o;i++)if(this.events[i].name==e)try{this.events[i].f.call(this)}catch(t){}return this},t["un"+e]=o["un"+e]=function(t){for(var n=this.events||[],r=n.length;r--;)if(n[r].name==e&&(n[r].f==t||!t))return n[r].unbind(),n.splice(r,1),!n.length&&delete this.events,this;return this}}(s[m]);o.hover=function(t,e,n,r){return this.mouseover(t,n).mouseout(e,r||n)},o.unhover=function(t,e){return this.unmouseover(t).unmouseout(e)};var v=[];o.drag=function(n,r,i,o,a,s){var l,h=this;if(!arguments.length)return h.drag((function(t,e){this.attr({transform:l+(l?"T":"t")+[t,e]})}),(function(){l=this.transform().local}));function u(l,u,c){(l.originalEvent||l).preventDefault(),h._drag.x=u,h._drag.y=c,h._drag.id=l.identifier,!d.length&&t.mousemove(p).mouseup(g),d.push({el:h,move_scope:o,start_scope:a,end_scope:s}),r&&e.on("snap.drag.start."+h.id,r),n&&e.on("snap.drag.move."+h.id,n),i&&e.on("snap.drag.end."+h.id,i),e("snap.drag.start."+h.id,a||o||h,u,c,l)}function c(t,n,r){e("snap.draginit."+h.id,h,t,n,r)}return e.on("snap.draginit."+h.id,u),h._drag={},v.push({el:h,start:u,init:c}),h.mousedown(c),h},o.undrag=function(){for(var n=v.length;n--;)v[n].el==this&&(this.unmousedown(v[n].init),v.splice(n,1),e.unbind("snap.drag.*."+this.id),e.unbind("snap.draginit."+this.id));return!v.length&&t.unmousemove(p).unmouseup(g),this}})),r.plugin((function(t,n,r,i){n.prototype;var o=r.prototype,a=/^\s*url\((.+)\)/,s=String,l=t._.$;t.filter={},o.filter=function(e){var r=this;"svg"!=r.type&&(r=r.paper);var i=t.parse(s(e)),o=t._.id(),a=(r.node.offsetWidth,r.node.offsetHeight,l("filter"));return l(a,{id:o,filterUnits:"userSpaceOnUse"}),a.appendChild(i.node),r.defs.appendChild(a),new n(a)},e.on("snap.util.getattr.filter",(function(){e.stop();var n=l(this.node,"filter");if(n){var r=s(n).match(a);return r&&t.select(r[1])}})),e.on("snap.util.attr.filter",(function(r){if(r instanceof n&&"filter"==r.type){e.stop();var i=r.node.id;i||(l(r.node,{id:r.id}),i=r.id),l(this.node,{filter:t.url(i)})}r&&"none"!=r||(e.stop(),this.node.removeAttribute("filter"))})),t.filter.blur=function(e,n){null==e&&(e=2);var r=null==n?e:[e,n];return t.format('<feGaussianBlur stdDeviation="{def}"/>',{def:r})},t.filter.blur.toString=function(){return this()},t.filter.shadow=function(e,n,r,i,o){return null==o&&(null==i?(o=r,r=4,i="#000"):(o=i,i=r,r=4)),null==r&&(r=4),null==o&&(o=1),null==e&&(e=0,n=2),null==n&&(n=e),i=t.color(i),t.format('<feGaussianBlur in="SourceAlpha" stdDeviation="{blur}"/><feOffset dx="{dx}" dy="{dy}" result="offsetblur"/><feFlood flood-color="{color}"/><feComposite in2="offsetblur" operator="in"/><feComponentTransfer><feFuncA type="linear" slope="{opacity}"/></feComponentTransfer><feMerge><feMergeNode/><feMergeNode in="SourceGraphic"/></feMerge>',{color:i,dx:e,dy:n,blur:r,opacity:o})},t.filter.shadow.toString=function(){return this()},t.filter.grayscale=function(e){return null==e&&(e=1),t.format('<feColorMatrix type="matrix" values="{a} {b} {c} 0 0 {d} {e} {f} 0 0 {g} {b} {h} 0 0 0 0 0 1 0"/>',{a:.2126+.7874*(1-e),b:.7152-.7152*(1-e),c:.0722-.0722*(1-e),d:.2126-.2126*(1-e),e:.7152+.2848*(1-e),f:.0722-.0722*(1-e),g:.2126-.2126*(1-e),h:.0722+.9278*(1-e)})},t.filter.grayscale.toString=function(){return this()},t.filter.sepia=function(e){return null==e&&(e=1),t.format('<feColorMatrix type="matrix" values="{a} {b} {c} 0 0 {d} {e} {f} 0 0 {g} {h} {i} 0 0 0 0 0 1 0"/>',{a:.393+.607*(1-e),b:.769-.769*(1-e),c:.189-.189*(1-e),d:.349-.349*(1-e),e:.686+.314*(1-e),f:.168-.168*(1-e),g:.272-.272*(1-e),h:.534-.534*(1-e),i:.131+.869*(1-e)})},t.filter.sepia.toString=function(){return this()},t.filter.saturate=function(e){return null==e&&(e=1),t.format('<feColorMatrix type="saturate" values="{amount}"/>',{amount:1-e})},t.filter.saturate.toString=function(){return this()},t.filter.hueRotate=function(e){return e=e||0,t.format('<feColorMatrix type="hueRotate" values="{angle}"/>',{angle:e})},t.filter.hueRotate.toString=function(){return this()},t.filter.invert=function(e){return null==e&&(e=1),t.format('<feComponentTransfer><feFuncR type="table" tableValues="{amount} {amount2}"/><feFuncG type="table" tableValues="{amount} {amount2}"/><feFuncB type="table" tableValues="{amount} {amount2}"/></feComponentTransfer>',{amount:e,amount2:1-e})},t.filter.invert.toString=function(){return this()},t.filter.brightness=function(e){return null==e&&(e=1),t.format('<feComponentTransfer><feFuncR type="linear" slope="{amount}"/><feFuncG type="linear" slope="{amount}"/><feFuncB type="linear" slope="{amount}"/></feComponentTransfer>',{amount:e})},t.filter.brightness.toString=function(){return this()},t.filter.contrast=function(e){return null==e&&(e=1),t.format('<feComponentTransfer><feFuncR type="linear" slope="{amount}" intercept="{amount2}"/><feFuncG type="linear" slope="{amount}" intercept="{amount2}"/><feFuncB type="linear" slope="{amount}" intercept="{amount2}"/></feComponentTransfer>',{amount:e,amount2:.5-e/2})},t.filter.contrast.toString=function(){return this()}})),r.plugin((function(t,e,n,r,i){var o=t._.box,a=t.is,s=/^[^a-z]*([tbmlrc])/i,l=function(){return"T"+this.dx+","+this.dy};e.prototype.getAlign=function(t,e){null==e&&a(t,"string")&&(e=t,t=null);var n=(t=t||this.paper).getBBox?t.getBBox():o(t),r=this.getBBox(),i={};switch(e=(e=e&&e.match(s))?e[1].toLowerCase():"c"){case"t":i.dx=0,i.dy=n.y-r.y;break;case"b":i.dx=0,i.dy=n.y2-r.y2;break;case"m":i.dx=0,i.dy=n.cy-r.cy;break;case"l":i.dx=n.x-r.x,i.dy=0;break;case"r":i.dx=n.x2-r.x2,i.dy=0;break;default:i.dx=n.cx-r.cx,i.dy=0}return i.toString=l,i},e.prototype.align=function(t,e){return this.transform("..."+this.getAlign(t,e))}})),r.plugin((function(e,n,r,i){function o(t){t=t.split(/(?=#)/);var e=new String(t[5]);return e[50]=t[0],e[100]=t[1],e[200]=t[2],e[300]=t[3],e[400]=t[4],e[500]=t[5],e[600]=t[6],e[700]=t[7],e[800]=t[8],e[900]=t[9],t[10]&&(e.A100=t[10],e.A200=t[11],e.A400=t[12],e.A700=t[13]),e}e.mui={},e.flat={},e.mui.red=o("#ffebee#ffcdd2#ef9a9a#e57373#ef5350#f44336#e53935#d32f2f#c62828#b71c1c#ff8a80#ff5252#ff1744#d50000"),e.mui.pink=o("#FCE4EC#F8BBD0#F48FB1#F06292#EC407A#E91E63#D81B60#C2185B#AD1457#880E4F#FF80AB#FF4081#F50057#C51162"),e.mui.purple=o("#F3E5F5#E1BEE7#CE93D8#BA68C8#AB47BC#9C27B0#8E24AA#7B1FA2#6A1B9A#4A148C#EA80FC#E040FB#D500F9#AA00FF"),e.mui.deeppurple=o("#EDE7F6#D1C4E9#B39DDB#9575CD#7E57C2#673AB7#5E35B1#512DA8#4527A0#311B92#B388FF#7C4DFF#651FFF#6200EA"),e.mui.indigo=o("#E8EAF6#C5CAE9#9FA8DA#7986CB#5C6BC0#3F51B5#3949AB#303F9F#283593#1A237E#8C9EFF#536DFE#3D5AFE#304FFE"),e.mui.blue=o("#E3F2FD#BBDEFB#90CAF9#64B5F6#64B5F6#2196F3#1E88E5#1976D2#1565C0#0D47A1#82B1FF#448AFF#2979FF#2962FF"),e.mui.lightblue=o("#E1F5FE#B3E5FC#81D4FA#4FC3F7#29B6F6#03A9F4#039BE5#0288D1#0277BD#01579B#80D8FF#40C4FF#00B0FF#0091EA"),e.mui.cyan=o("#E0F7FA#B2EBF2#80DEEA#4DD0E1#26C6DA#00BCD4#00ACC1#0097A7#00838F#006064#84FFFF#18FFFF#00E5FF#00B8D4"),e.mui.teal=o("#E0F2F1#B2DFDB#80CBC4#4DB6AC#26A69A#009688#00897B#00796B#00695C#004D40#A7FFEB#64FFDA#1DE9B6#00BFA5"),e.mui.green=o("#E8F5E9#C8E6C9#A5D6A7#81C784#66BB6A#4CAF50#43A047#388E3C#2E7D32#1B5E20#B9F6CA#69F0AE#00E676#00C853"),e.mui.lightgreen=o("#F1F8E9#DCEDC8#C5E1A5#AED581#9CCC65#8BC34A#7CB342#689F38#558B2F#33691E#CCFF90#B2FF59#76FF03#64DD17"),e.mui.lime=o("#F9FBE7#F0F4C3#E6EE9C#DCE775#D4E157#CDDC39#C0CA33#AFB42B#9E9D24#827717#F4FF81#EEFF41#C6FF00#AEEA00"),e.mui.yellow=o("#FFFDE7#FFF9C4#FFF59D#FFF176#FFEE58#FFEB3B#FDD835#FBC02D#F9A825#F57F17#FFFF8D#FFFF00#FFEA00#FFD600"),e.mui.amber=o("#FFF8E1#FFECB3#FFE082#FFD54F#FFCA28#FFC107#FFB300#FFA000#FF8F00#FF6F00#FFE57F#FFD740#FFC400#FFAB00"),e.mui.orange=o("#FFF3E0#FFE0B2#FFCC80#FFB74D#FFA726#FF9800#FB8C00#F57C00#EF6C00#E65100#FFD180#FFAB40#FF9100#FF6D00"),e.mui.deeporange=o("#FBE9E7#FFCCBC#FFAB91#FF8A65#FF7043#FF5722#F4511E#E64A19#D84315#BF360C#FF9E80#FF6E40#FF3D00#DD2C00"),e.mui.brown=o("#EFEBE9#D7CCC8#BCAAA4#A1887F#8D6E63#795548#6D4C41#5D4037#4E342E#3E2723"),e.mui.grey=o("#FAFAFA#F5F5F5#EEEEEE#E0E0E0#BDBDBD#9E9E9E#757575#616161#424242#212121"),e.mui.bluegrey=o("#ECEFF1#CFD8DC#B0BEC5#90A4AE#78909C#607D8B#546E7A#455A64#37474F#263238"),e.flat.turquoise="#1abc9c",e.flat.greensea="#16a085",e.flat.sunflower="#f1c40f",e.flat.orange="#f39c12",e.flat.emerland="#2ecc71",e.flat.nephritis="#27ae60",e.flat.carrot="#e67e22",e.flat.pumpkin="#d35400",e.flat.peterriver="#3498db",e.flat.belizehole="#2980b9",e.flat.alizarin="#e74c3c",e.flat.pomegranate="#c0392b",e.flat.amethyst="#9b59b6",e.flat.wisteria="#8e44ad",e.flat.clouds="#ecf0f1",e.flat.silver="#bdc3c7",e.flat.wetasphalt="#34495e",e.flat.midnightblue="#2c3e50",e.flat.concrete="#95a5a6",e.flat.asbestos="#7f8c8d",e.importMUIColors=function(){for(var n in e.mui)e.mui.hasOwnProperty(n)&&(t[n]=e.mui[n])}})),r}(v,t)}.apply(e,[r]))||(t.exports=i)}).call(window)},function(t,e,n){"use strict";n.r(e);class r{constructor(){this.head=null,this.tail=null,this.len=0}enqueue(t){this.addFront(t)}dequeue(){return this.removeBack()}get length(){return this.len}addFront(t){const e={item:t,next:this.head,previous:null};null!==this.head&&(this.head.previous=e),this.head=e,null===this.tail&&(this.tail=e),this.len++}removeBack(){let t=null;return null!==this.tail&&(t=this.tail.item,null!==this.tail.previous?(this.tail=this.tail.previous,this.tail.next=null):this.head=this.tail=null,this.len--),t}}class i{constructor(){this.array=[]}get length(){return this.array.length}enqueue(t,e){this.array.push(new o(t,e)),this.siftUp(this.array.length-1)}dequeue(){const t=this.array.pop();if(this.array.length>0){const e=this.array[0].item;return this.array[0]=t,this.siftDown(0),e}return null==t?void 0:t.item}siftDown(t){const e=2*t+1,n=2*t+2;let r=t;e<this.array.length&&this.array[e].priority<this.array[r].priority&&(r=e),n<this.array.length&&this.array[n].priority<this.array[r].priority&&(r=n),r!==t&&([this.array[t],this.array[r]]=[this.array[r],this.array[t]],this.siftDown(r))}siftUp(t){const e=Math.round(t/2)-1;t>0&&t<this.array.length&&this.array[t].priority<this.array[e].priority&&([this.array[t],this.array[e]]=[this.array[e],this.array[t]],this.siftUp(e))}}class o{constructor(t,e){this.priority=t,this.item=e}}var a=function(t,e,n,r){return new(n||(n=Promise))((function(i,o){function a(t){try{l(r.next(t))}catch(t){o(t)}}function s(t){try{l(r.throw(t))}catch(t){o(t)}}function l(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(a,s)}l((r=r.apply(t,e||[])).next())}))};class s{constructor(){this.weight=1,this.diagonalWeight=1.5,this.edgeList=new Map,this.vertices=new Map}set(t,e){if(!this.vertices.has(t)){const n={label:t,value:e,isObstacle:!1};this.vertices.set(t,n),this.edgeList.set(t,[])}}get(t){return this.vertices.get(t).value}getVertex(t){return this.vertices.get(t)}connect(t,e,n,r=!1){const i=this.vertices.get(t),o=this.vertices.get(e),a=this.edgeList.get(t),s=this.edgeList.get(e),l={from:i,to:o,weight:n,isDiagonal:r},h={from:o,to:i,weight:n,isDiagonal:r};a.push(l),s.push(h)}bfs(t,e,n){return a(this,void 0,void 0,(function*(){const i=new r,o=new Map;let a,s=!0;for(i.enqueue(this.vertices.get(t));s&&i.length>0;)if(a=i.dequeue(),!o.has(a.label)){o.set(a.label,!0),s=yield e(a);for(const t of this.edgeList.get(a.label))i.enqueue(t.to)}null==n||n.call(a)}))}dfs(t,e,n){return a(this,void 0,void 0,(function*(){const r=[this.vertices.get(t)],i=new Map;let o,a=!0;for(;a&&r.length>0;)if(o=r.pop(),!i.has(o.label)){i.set(o.label,!0),a=yield e(o);for(const t of this.edgeList.get(o.label))r.push(t.to)}null==n||n.call(o)}))}dijkstra(t,e,n=!1){const r=new i,o=new Map;let a;for(r.enqueue(0,this.vertices.get(t)),o.set(t,{previous:"",weight:0});r.length>0;){a=r.dequeue();for(const t of this.edgeList.get(a.label))t.isDiagonal&&!n||this.relax(t,o,r)}return o}relax(t,e,n){if(t.to.isObstacle)return;e.has(t.to.label)||e.set(t.to.label,{previous:t.from.label,weight:1/0});const r=e.get(t.to.label),i=e.get(t.from.label).weight+this.getWeight(t);i<r.weight&&(r.previous=t.from.label,r.weight=i,n.enqueue(i,t.to))}getWeight(t){return t.isDiagonal?this.diagonalWeight:this.weight}}var l=n(0),h=n.n(l);class u{constructor(t,e){this.svgElement=t,this.graph=e,this.blockSize=30,this.strokeWidth=1,this.allowDiagonals=!0,this.blocks=new Map,this.svgElement=t,this.paper=h()(t),this.height=Number(this.svgElement.clientHeight),this.width=Number(this.svgElement.clientWidth),this.svgElement.innerHTML=""}get maxWidth(){return Math.floor(this.width/this.blockSize)}get maxHeight(){return Math.floor(this.height/this.blockSize)}grid(t="#f1f1f1",e="#bbb"){const n=this.maxWidth,r=this.maxHeight;for(let i=0;i<r;i++)for(let o=0;o<n;o++)this.addBlock(o,i,t,e),this.connectBlock(o,i,n-1,r-1)}setBackgroundColor(t){for(const e of this.blocks)e[1].attr({fill:t})}setBorderColor(t){for(const e of this.blocks)e[1].attr({stroke:t})}addBlock(t,e,n,r){const i=t*this.blockSize,o=e*this.blockSize,a=this.getKey(t,e),s=this.paper.rect(i,o,this.blockSize,this.blockSize);s.attr({fill:n,stroke:r,strokeWidth:this.strokeWidth}),s.click(this.blockClick.bind(this,a)),this.blocks.set(a,s)}connectBlock(t,e,n,r){const i=this.getKey(t,e);if(this.graph.set(i,{x:t,y:e}),t<n){const n=this.getKey(t+1,e);this.graph.set(n,{x:t+1,y:e}),this.graph.connect(i,n,1)}if(e<r){const n=this.getKey(t,e+1);this.graph.set(n,{x:t,y:e+1}),this.graph.connect(i,n,1)}if(this.allowDiagonals){if(t<n&&e<r){const n=this.getKey(t+1,e+1);this.graph.set(n,{x:t+1,y:e+1}),this.graph.connect(i,n,1.5,!0)}if(t>0&&e<r){const n=this.getKey(t-1,e+1);this.graph.set(n,{x:t-1,y:e+1}),this.graph.connect(i,n,1.5,!0)}}}getKey(t,e){return`${t}_${e}`}blockClick(t,e){}}class c{constructor(t,e){this.x=t,this.y=e}static toPixel(t,e){return{x:t.x*e,y:t.y*e}}static toBlock(t,e){return{x:Math.floor(t.x/e),y:Math.floor(t.y/e)}}}class f{constructor(t,e){this.svgElement=t,this.graph=e,this.blockSize=30,this.startNode=null,this.endNode=null,this.draggingNode=null,this.wire=null,this.isObstacleMode=!1,this.svgElement=t,this.paper=h()(t),this.graph=e,this.paper.drag(this.onDrag.bind(this),this.onDragStart.bind(this),this.onDragEnd.bind(this)),this.paper.touchstart(this.onTouchStart.bind(this)),this.paper.touchmove(this.onTouchMove.bind(this)),this.paper.touchend(this.onTouchEnd.bind(this))}setStartNode(t,e){this.startNode||(this.startNode=this.paper.rect(t*this.blockSize,e*this.blockSize,this.blockSize,this.blockSize)),this.setNode(this.startNode,t*this.blockSize,e*this.blockSize,"rgba(41, 128, 185, 0.5)","black",1)}setEndNode(t,e){this.endNode||(this.endNode=this.paper.rect(t*this.blockSize,e*this.blockSize,this.blockSize,this.blockSize)),this.setNode(this.endNode,t*this.blockSize,e*this.blockSize,"rgba(39, 174, 96, 0.5)","black",1)}showConnections(t,e){var n;const r=document.getElementById("information");if(null===(n=this.polyLine)||void 0===n||n.remove(),-1===e)return void(r.innerHTML="Can't reach the destination node :-S");const i=[];for(const e of t){const t=this.graph.get(e),n=c.toPixel(t,this.blockSize),r=n.x+this.blockSize/2,o=n.y+this.blockSize/2;i.push(r,o)}const o=`Block(s): ${t.length-1} - Weight: ${e}`;r.innerHTML=o,this.polyLine=this.paper.polyline(i),this.polyLine.attr({fill:"none",stroke:"#333",strokeWidth:2})}get startX(){return this.getPositionX(this.startNode)}get endX(){return this.getPositionX(this.endNode)}get startY(){return this.getPositionY(this.startNode)}get endY(){return this.getPositionY(this.endNode)}getPositionX(t){return Math.round(Number(t.attr("x"))/this.blockSize)}getPositionY(t){return Math.round(Number(t.attr("y"))/this.blockSize)}setNode(t,e,n,r,i,o=1){t.attr({x:e,y:n,fill:r,stroke:i,strokeWidth:o})}onDragStart(t,e,n){const r=h.a.getElementByPoint(t,e);r===this.startNode||r===this.endNode?this.onNodeDragStart(r,t,e,n):this.onPaperDragStart(r,t,e,n)}onDrag(t,e,n,r,i){const o=h.a.getElementByPoint(n,r);this.draggingNode?this.onNodeDrag(o,t,e,n,r,i):this.onPaperDrag(o,t,e,n,r,i)}onDragEnd(t){const e=h.a.getElementByPoint(t.x,t.y);this.draggingNode?this.onNodeDragEnd(e,t):this.onPaperDragEnd(t)}onNodeDragStart(t,e,n,r){this.draggingNode=t,this.wire||(this.wire=this.paper.rect(Number(t.attr("x")),Number(t.attr("y")),this.blockSize,this.blockSize),this.wire.attr({fill:"transparent",stroke:"black"}))}onNodeDrag(t,e,n,r,i,o){r>0&&i>0&&r<this.svgElement.clientWidth-this.blockSize&&i<this.svgElement.clientHeight-this.blockSize&&this.wire.attr({x:r,y:i})}onNodeDragEnd(t,e){const n=c.toBlock({x:Number(this.wire.attr("x")),y:Number(this.wire.attr("y"))},this.blockSize);this.graph.getVertex(`${n.x}_${n.y}`).isObstacle||this.draggingNode.attr({x:n.x*this.blockSize,y:n.y*this.blockSize}),this.wire.remove(),this.wire=null,this.draggingNode=null,this.onDragFinished()}onPaperDragStart(t,e,n,r){const i=c.toBlock({x:e,y:n},this.blockSize),o=this.graph.getVertex(`${i.x}_${i.y}`);this.isObstacleMode=!o.isObstacle}onPaperDrag(t,e,n,r,i,o){const a=c.toBlock({x:r,y:i},this.blockSize),s=this.graph.getVertex(`${a.x}_${a.y}`);s&&t!==this.startNode&&t!==this.endNode&&t!==this.polyLine&&(s.isObstacle=this.isObstacleMode,t.attr({fill:this.isObstacleMode?"gray":"#f1f1f1"}))}onPaperDragEnd(t){var e;null===(e=this.onObstacleFinished)||void 0===e||e.call(null)}onTouchStart(t){const e=t.touches[0].clientX,n=t.touches[0].clientY;this.onDragStart.call(this,e,n,t)}onTouchMove(t){const e=t.touches[0].clientX,n=t.touches[0].clientY;this.onDrag.call(this,e,n,e,n,t)}onTouchEnd(t){const e=t.changedTouches[0].clientX,n=t.changedTouches[0].clientY;this.onDragEnd.call(this,{x:e,y:n})}}class d{constructor(){this.showMenu=document.getElementById("showMenu"),this.hideMenu=document.getElementById("hideMenu"),this.mainMenu=document.getElementById("mainMenu"),this.hideEventHandler=this.hideEventHandler.bind(this),this.setupMenu()}show(){this.mainMenu.removeEventListener("animationend",this.hideEventHandler),this.mainMenu.classList.remove("hidden"),this.mainMenu.classList.add("animated","fadeInLeft")}hide(){this.mainMenu.classList.add("animated","fadeOutLeft"),this.mainMenu.addEventListener("animationend",this.hideEventHandler)}hideEventHandler(){this.mainMenu.classList.add("hidden"),this.mainMenu.classList.remove("animated","fadeOutLeft")}setupMenu(){this.hideMenu.addEventListener("click",()=>{this.hide()}),this.showMenu.addEventListener("click",()=>{this.show()})}}class p{constructor(){this.setup(40)}main(){document.getElementById("blockSize");document.getElementById("bfs").addEventListener("click",()=>{this.runAlgorithm(this.visualConnection,this.graph)}),this.menu=new d}setup(t){this.graph=new s,this.field=new u(document.querySelector("#paper"),this.graph),this.visualConnection=new f(document.querySelector("#paper"),this.graph),this.field.blockSize=this.visualConnection.blockSize=t,this.field.grid(),this.visualConnection.setStartNode(this.random(1,this.field.maxWidth-1),this.random(1,this.field.maxHeight-1)),this.visualConnection.setEndNode(this.random(1,this.field.maxWidth-1),this.random(1,this.field.maxHeight-1)),this.visualConnection.onDragFinished=()=>this.runAlgorithm(this.visualConnection,this.graph),this.visualConnection.onObstacleFinished=()=>this.runAlgorithm(this.visualConnection,this.graph)}runAlgorithm(t,e){const n=document.getElementById("blockWeight"),r=document.getElementById("diagonalWeight");e.weight=Number(n.value),e.diagonalWeight=Number(r.value);const i=`${t.startX}_${t.startY}`,o=`${t.endX}_${t.endY}`,a=document.getElementById("allowDiagonal"),s=e.dijkstra(i,o,a.checked);this.showConnections(s,o,i,t)}showConnections(t,e,n,r){let i=t.get(e),o=e;const a=i&&i.weight||-1,s=[o];for(;i&&o!==n;)o=i.previous,i=t.get(o),s.push(o);r.showConnections(s,a)}random(t,e){return Math.floor(Math.random()*(e-t))+t}}window.addEventListener("load",()=>{(new p).main()})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,