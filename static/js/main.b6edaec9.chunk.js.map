{"version":3,"sources":["components/dos/menu/Menu.js","components/dos/menu/MenuItem.js","components/dos/menu/MenuPopup.js","components/dos/menu/MenuPopupItem.js","components/dos/menu/MenuPopupItemLink.js","components/dos/clock/Clock.js","components/dos/window/Window.js","components/dos/button/Button.js","components/dos/msgbox/MsgBox.js","components/dialogs/AboutDialog.js","components/dialogs/ProjectsDialog.js","lib/tetris/field.js","lib/tetris/drawer.js","lib/tetris/tetromino.js","lib/tetris/config.js","lib/tetris/tetris.js","lib/tetris/tetrisbuilder.js","components/tetris/Tetris.js","components/dialogs/TetrisDialog.js","App.js","registerServiceWorker.js","index.js"],"names":["Menu","props","className","role","children","MenuItem","useState","popupVisible","setPopupVisible","onBlur","item","onMouseOver","onClick","id","onMouseOut","icon","label","substring","placeholder","defaultProps","MenuPopup","popup","MenuPopupItem","onItemClick","MenuPopupItemLink","href","link","target","rel","getTime","date","Date","hour","getHours","minutes","getMinutes","seconds","getSeconds","ampm","prefixZero","number","Clock","time","setTime","updateTime","useEffect","intervalId","setInterval","clearInterval","Window","windowRef","useRef","x","y","pos","setPos","dragInfo","setDragInfo","Math","abs","window","innerWidth","current","offsetWidth","innerHeight","offsetHeight","mouseMove","e","screenX","dragX","xLimit","screenY","dragY","yLimit","addEventListener","removeEventListener","ref","style","top","left","width","getStyle","onMouseDown","preventDefault","offsetLeft","offsetTop","onMouseUp","title","Button","MsgBox","buttonLabel","onButtonClick","AboutDialog","ProjectsDialog","Field","rows","cols","this","field","row","push","Array","isFull","color","borderColor","rowNumber","length","Drawer","canvas","blockSize","blankColor","ctx","getContext","backgroundColor","realX","realY","fillStyle","fillRect","strokeStyle","strokeRect","setBlock","col","block","clearRect","height","tetromino","matrix","getCurrentMatrix","getX","getY","rowNumberFrom","rowNumberTo","columns","getRow","value","getBlock","i","moveRow","removeRow","removeBlock","Tetromino","type","startX","startY","rotation","locked","setRotation","config","scoreMoveDown","scoreRemoveRow","tetrominoes","tetrominoesColor","COLLISION_TYPE","Tetris","drawer","defaultConfig","onUpdateScore","onGameOver","onElapsedSecond","onRandomTetromino","score","elapsedSeconds","gameOver","grid","setRandomTetromino","drawTetromino","currentTetromino","nextTetromino","getRandomTetromino","colors","randomColor","floor","random","randomIndex","deltaX","deltaY","testX","testY","isFullBlock","keyListener","bind","stepListener","elapsedSecondsListener","elapsedSecondsId","checkDown","indexOf","keyCode","isLocked","isThereCollision","moveLeft","currentRotation","getRotation","rotate","moveRight","lock","getBottomY","removedRows","isFullRow","moveAllRows","setGameOver","moveDown","TetrisBuilder","container","innerHTML","scoreElement","document","getElementById","timeElement","tetris","fieldNextPiece","drawerNextPiece","newGame","destroyGame","innerText","totalSeconds","reset","start","setListeners","tetrisRef","tetrisConfig","TetrisDialog","console","log","App","currentDialog","setCurrentDialog","closeDialog","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","catch","error","ReactDOM","render","URL","process","origin","fetch","response","status","headers","get","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.b6edaec9.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Menu.css';\r\n\r\nexport default function Menu(props) {\r\n  return (\r\n    <ul className=\"menu\" role=\"menu\">\r\n      {props.children}\r\n    </ul>\r\n  );  \r\n}\r\n","import React, { useState } from 'react';\r\nimport './MenuItem.css';\r\n\r\nexport default function MenuItem(props) {\r\n\r\n  const [popupVisible, setPopupVisible] = useState(false);\r\n\r\n  const onClick = () => {\r\n    if (props.onClick) {\r\n      props.onClick(props.id);\r\n    }\r\n    setPopupVisible(!popupVisible);\r\n  }\r\n\r\n  const onBlur = () => setPopupVisible(false);\r\n\r\n  const item = (\r\n    <li onMouseOver={onClick} onMouseOut={onBlur} className={`menu-item ${popupVisible ? 'menu-item-active' : ''}`}>\r\n      <span><i className={props.icon ? `icon fa ${props.icon}` : ''}></i><span className=\"red\">{props.label[0]}</span>{props.label.substring(1)}</span>\r\n      <span onClick={onBlur} className={`${popupVisible ? '' : 'hidden'}`}>{props.children}</span>\r\n    </li>\r\n  );\r\n  const placeholder = (\r\n    <li className=\"placeholder\">\r\n      {props.children}\r\n    </li>\r\n  );\r\n  return props.placeholder ? placeholder : item;\r\n}\r\n\r\nMenuItem.defaultProps = {\r\n  icon: '',\r\n  label: '',\r\n  placeholder: false,\r\n}","import React from 'react';\r\nimport './MenuPopup.css';\r\n\r\nexport default function MenuPopup(props) {\r\n  const popup = \r\n  <ul className=\"menu-popup\">\r\n    <div className=\"menu-popup-container\">\r\n      {props.children}\r\n    </div>\r\n  </ul>\r\n  return props.children ? popup : '';\r\n}","import React from 'react';\r\nimport './MenuPopupItem.css';\r\n\r\nexport default function MenuPopupItem(props) {\r\n  const onClick = () => {\r\n    if (props.onItemClick) {\r\n      props.onItemClick(props.id);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <li className=\"menu-popup-item\" onClick={onClick}>\r\n      <span><span className=\"red\">{props.label[0]}</span>{props.label.substring(1)}</span>\r\n    </li>\r\n  );  \r\n}\r\n","import React from 'react';\r\nimport './MenuPopupItemLink.css';\r\n\r\nexport default function MenuPopupItemLink(props) {\r\n  const onClick = () => {\r\n    if (props.onItemClick) {\r\n      props.onItemClick(props.id);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <li className=\"menu-popup-item\" onClick={onClick}>\r\n      <a href={props.link} target=\"_blank\" rel=\"noopener noreferrer\">\r\n        <i className={`fa ${props.icon}`}></i>\r\n        <span className=\"red\"> {props.label[0]}</span>{props.label.substring(1)}\r\n      </a>\r\n    </li>\r\n  );  \r\n}\r\n\r\nMenuPopupItemLink.defaultProps = {\r\n  link: '',\r\n  icon: ''\r\n};","import React, { useEffect, useState } from 'react';\r\n\r\nfunction getTime() {\r\n  const date = new Date();\r\n  return {\r\n    hour: date.getHours(),\r\n    minutes: date.getMinutes(),\r\n    seconds: date.getSeconds(),\r\n    ampm: date.getHours() > 0 && date.getHours() < 13 ? 'AM' : 'PM'\r\n  };\r\n}\r\n\r\nfunction prefixZero(number) {\r\n  return number < 10 ? `0${number}` : number;\r\n}\r\n\r\nexport default function Clock(props) {\r\n  const [time, setTime] = useState(getTime());\r\n\r\n  const updateTime = () => setTime(getTime());\r\n\r\n  useEffect(() => {\r\n    const intervalId = setInterval(updateTime, 1000); \r\n    return function clearTimer() {\r\n      clearInterval(intervalId);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <span>\r\n      {`${prefixZero(time.hour)}:${prefixZero(time.minutes)}:${prefixZero(time.seconds)} ${time.ampm}`}\r\n    </span>\r\n  );\r\n}\r\n","import React, { useState, useRef, useEffect } from 'react';\r\nimport './Window.css';\r\n\r\nexport default function Window(props) {\r\n  const windowRef = useRef();\r\n  const [pos, setPos] = useState({x: 0, y: 0});\r\n  const [dragInfo, setDragInfo] = useState(false);\r\n\r\n\r\n  useEffect(() => {\r\n    const x = Math.abs((window.innerWidth / 2) - (windowRef.current.offsetWidth / 2));\r\n    const y = Math.abs((window.innerHeight / 2) - (windowRef.current.offsetHeight / 2));\r\n    setPos({x, y});\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    function mouseMove(e) {\r\n        const x = e.screenX - dragInfo.dragX;\r\n        const xLimit = window.innerWidth - windowRef.current.offsetWidth;\r\n        const y = e.screenY - dragInfo.dragY; \r\n        const yLimit = window.innerHeight - windowRef.current.offsetHeight;\r\n        if ((x > 0 && x < xLimit) && (y > 25 && y < yLimit)) {\r\n          setPos({x, y});\r\n        } else {\r\n          setDragInfo(false);\r\n        }\r\n    }\r\n    if (dragInfo) {\r\n      window.addEventListener('mousemove', mouseMove);\r\n    }\r\n    return function cleanup() {\r\n      window.removeEventListener('mousemove', mouseMove);\r\n    }\r\n  }, [dragInfo]);\r\n\r\n  function onMouseDown(e) {\r\n    e.preventDefault();\r\n    setDragInfo({dragX: e.screenX - windowRef.current.offsetLeft, dragY: e.screenY - windowRef.current.offsetTop});\r\n  }\r\n\r\n  function onMouseUp(e) {\r\n    e.preventDefault();\r\n    setDragInfo(false);\r\n  }\r\n\r\n  function getStyle() {\r\n    const style = { top: pos.y, left: pos.x };\r\n    if (props.width) {\r\n      style.width = props.width;\r\n    }\r\n    return style;\r\n  }\r\n\r\n  return (\r\n    <div className={dragInfo ? 'window dragging' : 'window'} ref={windowRef} style={getStyle()}>\r\n      <div className=\"border\">\r\n        <div className=\"window-title\" onMouseDown={onMouseDown} onMouseUp={onMouseUp}>\r\n          <span className=\"title\">{props.title}</span>\r\n        </div>\r\n        <div className=\"window-body\">\r\n          {props.children}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );  \r\n}\r\n\r\nWindow.defaultProps = {\r\n  title: ''\r\n}","import React from 'react';\r\nimport './Button.css';\r\n\r\nexport default function Button(props) {\r\n\r\n  return (\r\n    <span onClick={props.onClick} className=\"button\">\r\n      <span className=\"label\">{props.label}</span>  \r\n    </span>\r\n  );  \r\n}\r\n","import React from 'react';\r\nimport Window from '../window/Window';\r\nimport Button from '../button/Button';\r\nimport './MsgBox.css';\r\n\r\nexport default function MsgBox(props) {\r\n  return (\r\n    <Window title={props.title} width={props.width}>\r\n      <div className=\"main text-justify\">\r\n        {props.children}\r\n      </div>\r\n      <div className=\"text-center bottom-button\">\r\n        <Button label={props.buttonLabel} onClick={props.onButtonClick}/>\r\n      </div>\r\n    </Window>\r\n  );\r\n}\r\n\r\nMsgBox.defaultProps = {\r\n  title: '',\r\n  buttonLabel: 'OK',\r\n  onButtonClick: () => {},\r\n}","import React from 'react';\r\nimport MsgBox from '../dos/msgbox/MsgBox';\r\n\r\n\r\nexport default function AboutDialog(props) {\r\n  return (\r\n    <MsgBox title=\"about\" onButtonClick={props.onButtonClick}>\r\n    <p className=\"box\">\r\n      I'm always reinventing the wheel because I think it's the best way to learn, in real\r\n      projects I usually (almost) try to use some Framework, but I'm not a '(Put Here your Framework) Developer' I like to learn\r\n      from the ground up, I like to build things from scratch, especially if it's something that I haven't done before or\r\n      I don't know how to do it, because I think it is the best way to learn.\r\n    </p>\r\n    <p className=\"box\">\r\n      About this weird design: I tried to mimic the old <a href=\"https://en.wikipedia.org/wiki/MS-DOS_Editor\" target=\"_blank\" rel=\"noopener noreferrer\">MS-DOS Edit style</a>.\r\n      Actually it is a mix between the Old MS-DOS Style and the old Borland's Turbo C Style.\r\n    </p>\r\n    <p className=\"box\">\r\n      Feel free to <a href=\"https://github.com/nullxor/info-site\" target=\"_blank\" rel=\"noopener noreferrer\">send me a Pull Request</a> for any typo.\r\n    </p>\r\n  </MsgBox>\r\n  );\r\n}","import React from 'react';\r\nimport MsgBox from '../dos/msgbox/MsgBox';\r\n\r\nexport default function ProjectsDialog(props) {\r\n  return (\r\n    <MsgBox title=\"side projects\" onButtonClick={props.onButtonClick}>\r\n    Some of the side stuff that I've worked or I'm planning to work on (No particular order). Maybe you'd want to work on it too :)\r\n    <ul className=\"list\">\r\n      <li><a href=\"https://github.com/nullxor/tetris-js\" target=\"_blank\" rel=\"noopener noreferrer\">Tetris game</a></li>\r\n      <li><a href=\"https://github.com/nullxor/path-finding-ts\" target=\"_blank\" rel=\"noopener noreferrer\">Path Finding Algorithms in TS</a></li>\r\n      <li>Snake game (Probably with vanilla JavaScript ES6/ES7)</li>\r\n      <li>Tiny bootloader or a tiny Pet Operating System (in C or maybe ASM)</li>\r\n      <li>Image to ASCII converter</li>\r\n      <li>Any simple progamming language with a compiler or transpiler (Probably will compile to WASM)</li>\r\n      <li>A template engine (Likely to be in Golang)</li>\r\n      <li>Build an emulator (MIPS or Atari 2600 emulator, I'll use Golang or C# for this)</li>\r\n      <li>Try to code a basic ACID Database with simple SQL Support (Probably in JavaScript or maybe C# or Golang)</li>\r\n      <li>Anything related to blockchain (I have to learn a lot about this)</li>\r\n      <li>Some kind of IA to play the previous games that I build, Snake or Tetris, maybe a Neural Network (I have to learn a lot about this)</li>\r\n    </ul>\r\n  </MsgBox>\r\n);\r\n}","/**\r\n * Represents a Matrix field for a Tetris game\r\n * Each item is accessed by its X / Y Coordinate\r\n * For this project the block color and borderColor can be any valid CSS color:\r\n * The return value for a given coordinate is an Object of this type\r\n * { isFull: true, color: 'color', borderColor: 'bordercolor' }\r\n */\r\nexport default class Field {\r\n  /**\r\n   * Default constructor\r\n   * @param {number} rows Rows \r\n   * @param {number} cols Columns\r\n   */\r\n  constructor(rows, cols) {\r\n    this.rows = rows;\r\n    this.cols = cols;\r\n    this.field = [];\r\n    for (let row = 0; row < this.rows; row++) {\r\n      this.field.push(new Array(this.cols));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets a block value for the given X - Y coordinate \r\n   * @param {number} x X\r\n   * @param {number} y Y\r\n   * @param {boolean} isFull Indicates if this block is full \r\n   * @param {string} color Color \r\n   * @param {string} borderColor Border Color\r\n   */\r\n  setBlock(x, y, isFull, color, borderColor = color) {\r\n    if (this.field[y][x]) {\r\n      this.field[y][x].isFull = isFull;\r\n      this.field[y][x].color = color;\r\n      this.field[y][x].borderColor = borderColor;\r\n    } else {\r\n      this.field[y][x] = { isFull: isFull, color: color, borderColor: borderColor };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets a block value at the given X - Y Coordinate\r\n   * @param {number} x X\r\n   * @param {number} y Y\r\n   */\r\n  getBlock(x, y) {\r\n    return this.field[y][x];\r\n  }\r\n\r\n  /**\r\n   * Checks if the block is full at the given X - Y coordinates \r\n   * @param {number} x X\r\n   * @param {number} y Y\r\n   */\r\n  isFullBlock(x, y) {\r\n    return this.field[y][x] && this.field[y][x].isFull;\r\n  }\r\n\r\n  /**\r\n   * Removes a block from the given X - Y Coordinate\r\n   * @param {number} x X\r\n   * @param {number} y Y\r\n   */\r\n  removeBlock(x, y) {\r\n    this.field[y][x] = false;\r\n  }\r\n\r\n  /**\r\n   * Retrieves the row at the given rowNumber\r\n   * @param {number} rowNumber Row number\r\n   */\r\n  getRow(rowNumber) {\r\n    return this.field[rowNumber];\r\n  }\r\n\r\n  /**\r\n   * Checks if the row has any full block at the given rowNumber\r\n   * @param {number} rowNumber Row number\r\n   */\r\n  rowHasAnyFull(rowNumber) {\r\n    for (let x = 0; x < this.field[rowNumber].length; x++) {\r\n      if (this.field[rowNumber][x].isFull) return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Checks if the whole row is full at the given rowNumber\r\n   * @param {number} rowNumber Row number\r\n   */\r\n  isFullRow(rowNumber) {\r\n    for (let x = 0; x < this.cols; x++) {\r\n      if (!this.field[rowNumber][x].isFull) return false;\r\n    }\r\n    return true;\r\n  }\r\n}\r\n","/**\r\n * Allow to draw and handle blocks operations in a Canvas\r\n */\r\nexport default class Drawer {\r\n  /**\r\n   * Default constructor\r\n   * @param {Canvas} canvas Canvas element\r\n   * @param {Field} field Field class implementation\r\n   * @param {number} blockSize Size of the block in pixels \r\n   * @param {string} blankColor Valid css color\r\n   */\r\n  constructor(canvas, field, blockSize, blankColor) {\r\n    this.canvas = canvas;\r\n    this.ctx = canvas.getContext('2d');\r\n    this.field = field;\r\n    this.blockSize = blockSize;\r\n    this.blankColor = blankColor;\r\n  }\r\n\r\n  /**\r\n   * Draws a block\r\n   * @param {number} x X axis\r\n   * @param {number} y Y axis\r\n   * @param {string} backgroundColor Valid css color\r\n   * @param {string} borderColor Valid css color\r\n   */\r\n  block(x, y, backgroundColor, borderColor = backgroundColor) {\r\n    const realX = x * this.blockSize, realY = y * this.blockSize;\r\n    this.ctx.fillStyle = backgroundColor;\r\n    this.ctx.fillRect(realX, realY, this.blockSize, this.blockSize);\r\n    this.ctx.strokeStyle = borderColor;\r\n    this.ctx.strokeRect(realX, realY, this.blockSize, this.blockSize);\r\n    this.field.setBlock(x, y, backgroundColor !== this.blankColor, backgroundColor, borderColor);\r\n  }\r\n  \r\n  /**\r\n   * Draws a grid with blocks\r\n   * @param {number} rows Number of rows\r\n   * @param {number} cols Number of columns\r\n   * @param {string} backgroundColor Valid css color\r\n   * @param {string} borderColor Valid css color\r\n   */\r\n  grid(rows, cols, backgroundColor, borderColor) {\r\n    for (let row = 0; row < rows; row++) {\r\n      for (let col = 0; col < cols; col++) {\r\n        this.block(col, row, backgroundColor, borderColor);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear the canvas\r\n   */\r\n  reset() {\r\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n  }\r\n\r\n  /**\r\n   * Draws a Tetromino\r\n   * @param {Tetromino} tetromino Tetromino\r\n   * @param {string} color Valid css color\r\n   * @param {string} borderColor Valid css color\r\n   */\r\n  drawTetromino(tetromino, color = tetromino.color, borderColor = tetromino.borderColor) {\r\n    const matrix = tetromino.getCurrentMatrix();\r\n    for (let row = 0; row < matrix.length; row++) {\r\n      for (let col = 0; col < matrix.length; col++) {\r\n        if (matrix[row][col]) {\r\n          const x = tetromino.getX() + col, y = tetromino.getY() + row;\r\n          this.block(x, y, color, borderColor);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Moves a row from source row number to dest row number\r\n   * removing the previous row\r\n   * @param {number} rowNumberFrom Row number from\r\n   * @param {number} rowNumberTo Row number to\r\n   */\r\n  moveRow(rowNumberFrom, rowNumberTo) {\r\n    const columns = this.field.getRow(rowNumberFrom).length;\r\n    for (let x = 0; x < columns; x++) {\r\n      const value = this.field.getBlock(x, rowNumberFrom);\r\n      if (value) {\r\n        this.field.setBlock(x, rowNumberTo, value.isFull, value.color, value.borderColor);\r\n        this.block(x, rowNumberTo, value.color, value.borderColor);  \r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Moves all the rows starting from source (rowNumberFrom) to\r\n   * dest (rowNumberTo) and all the previous rows until yAxis = 0\r\n   * The best use case for this method is when there is one or \r\n   * more full rows of blocks and we want remove the full lines\r\n   * and move the rest of rows to its new places until the top\r\n   * @param {number} rowNumberFrom Row number from\r\n   * @param {number} rowNumberTo Row number to\r\n   */\r\n  moveAllRows(rowNumberFrom, rowNumberTo) {\r\n    let i = 0;\r\n    for (let y = rowNumberFrom; y >= 0; y--) {\r\n      this.moveRow(y, rowNumberTo - i++);\r\n      this.removeRow(y);\r\n    }\r\n  }  \r\n\r\n  /**\r\n   * Removes the row at rowNumber\r\n   * @param {number} rowNumber Row number\r\n   */\r\n  removeRow(rowNumber) {\r\n    const columns = this.field.getRow(rowNumber).length;\r\n    for (let x = 0; x < columns; x++) {\r\n      this.field.removeBlock(x, rowNumber);\r\n      this.block(x, rowNumber, this.blankColor, this.blankColor);\r\n    }\r\n  }\r\n}\r\n","/**\r\n * Represents a Tetromino in a 2d plane\r\n * The representation (type) must be an Array\r\n * of NxN Binary Matrices (each matrix represents a rotation)\r\n */\r\nexport default class Tetromino {\r\n  /**\r\n   * Default constructor\r\n   * @param {Array} type Array of NxN Binary matrices\r\n   * @param {number} startX Initial X position\r\n   * @param {number} startY Initial Y position\r\n   * @param {string} color Valid css color\r\n   * @param {string} borderColor Valid css color\r\n   */\r\n  constructor(type, startX, startY, color, borderColor) {\r\n    [this.type, this.x, this.y, this.color, this.borderColor] = [type, startX, startY, color, borderColor];\r\n    this.rotation = 0;\r\n    this.locked = false;\r\n  }\r\n  \r\n  /**\r\n   * Returns the X position\r\n   */\r\n  getX() {\r\n    return this.x;\r\n  }\r\n\r\n  /**\r\n   * Returns the Y position of the First Top block\r\n   */\r\n  getY() {\r\n    return this.y;\r\n  }\r\n\r\n  /**\r\n   * Returns the Y position of the First Bottom block\r\n   */\r\n  getBottomY() {\r\n    const matrix = this.getCurrentMatrix();\r\n    for (let y = matrix.length - 1; y >= 0; y--) {\r\n      for (let x = 0; x < matrix.length; x++) {\r\n        if (matrix[y][x]) {\r\n          return this.y + y;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the current Tetromino's matrix\r\n   */\r\n  getCurrentMatrix() {\r\n    return this.type[this.rotation];\r\n  }\r\n\r\n  /**\r\n   * Is Locked?\r\n   */\r\n  isLocked() {\r\n    return this.locked;\r\n  }\r\n\r\n  /**\r\n   * Locks the tetromino (Can't be rotated or moved)\r\n   */\r\n  lock() {\r\n    this.locked = true;\r\n  }\r\n\r\n  /**\r\n   * Rotates the tetromino\r\n   */\r\n  rotate() {\r\n    if (!this.locked) this.setRotation(this.rotation + 1);\r\n  }\r\n\r\n  /**\r\n   * Returns the current rotation\r\n   */\r\n  getRotation() {\r\n    return this.rotation;\r\n  }\r\n\r\n  /**\r\n   * Sets the current rotation index \r\n   * @param {number} rotation Rotation index\r\n   */\r\n  setRotation(rotation) {\r\n    this.rotation = rotation % this.type.length;\r\n  }\r\n\r\n  /**\r\n   * Moves left\r\n   */\r\n  moveLeft() {\r\n    if (!this.locked) this.x--;\r\n  }\r\n\r\n  /**\r\n   * Moves right\r\n   */\r\n  moveRight()  {\r\n    if (!this.locked) this.x++;\r\n  }\r\n\r\n  /**\r\n   * Moves down\r\n   */\r\n  moveDown() {\r\n    if (!this.locked) this.y++;\r\n  }\r\n}\r\n","const TETROMINO_I =\r\n[\r\n  [\r\n    [1, 1, 1, 1],\r\n    [0, 0, 0, 0],\r\n    [0, 0, 0, 0],\r\n    [0, 0, 0, 0]\r\n  ], \r\n  [\r\n    [1, 0, 0, 0],\r\n    [1, 0, 0, 0],\r\n    [1, 0, 0, 0],\r\n    [1, 0, 0, 0]\r\n  ]\r\n];\r\n\r\nconst TETROMINO_Q =\r\n[\r\n  [\r\n    [1, 1, 0],\r\n    [1, 1, 0],\r\n    [0, 0, 0],\r\n  ], \r\n];\r\n\r\nconst TETROMINO_S =\r\n[\r\n  [\r\n    [0, 1, 1],\r\n    [1, 1, 0],\r\n    [0, 0, 0],\r\n  ], \r\n  [\r\n    [1, 0, 0],\r\n    [1, 1, 0],\r\n    [0, 1, 0],\r\n  ],\r\n];\r\n\r\nconst TETROMINO_Z =\r\n[\r\n  [\r\n    [1, 1, 0],\r\n    [0, 1, 1],\r\n    [0, 0, 0],\r\n  ], \r\n  [\r\n    [0, 1, 0],\r\n    [1, 1, 0],\r\n    [1, 0, 0],\r\n  ],\r\n];\r\n\r\nconst TETROMINO_T =\r\n[\r\n  [\r\n    [0, 1, 0],\r\n    [1, 1, 1],\r\n    [0, 0, 0],\r\n  ], \r\n  [\r\n    [0, 1, 0],\r\n    [0, 1, 1],\r\n    [0, 1, 0],\r\n  ],\r\n  [\r\n    [1, 1, 1],\r\n    [0, 1, 0],\r\n    [0, 0, 0],\r\n  ],\r\n  [\r\n    [0, 1, 0],\r\n    [1, 1, 0],\r\n    [0, 1, 0],\r\n  ],  \r\n];\r\n\r\nconst TETROMINO_L =\r\n[\r\n  [\r\n    [1, 1, 1],\r\n    [1, 0, 0],\r\n    [0, 0, 0],\r\n  ], \r\n  [\r\n    [1, 1, 0],\r\n    [0, 1, 0],\r\n    [0, 1, 0],\r\n  ],\r\n  [\r\n    [0, 0, 1],\r\n    [1, 1, 1],\r\n    [0, 0, 0],\r\n  ],\r\n  [\r\n    [1, 0, 0],\r\n    [1, 0, 0],\r\n    [1, 1, 0],\r\n  ],  \r\n];\r\n\r\nconst TETROMINO_J =\r\n[\r\n  [\r\n    [1, 0, 0],\r\n    [1, 1, 1],\r\n    [0, 0, 0],\r\n  ], \r\n  [\r\n    [1, 1, 0],\r\n    [1, 0, 0],\r\n    [1, 0, 0],\r\n  ],\r\n  [\r\n    [1, 1, 1],\r\n    [0, 0, 1],\r\n    [0, 0, 0],\r\n  ],\r\n  [\r\n    [0, 1, 0],\r\n    [0, 1, 0],\r\n    [1, 1, 0],\r\n  ],  \r\n];\r\n\r\nconst config = {\r\n  // Block size in pixels\r\n  blockSize: 15,\r\n  \r\n  // Rows in 'Blocks'\r\n  rows: 20,\r\n  \r\n  //Columns in 'Blocks'\r\n  columns: 10,\r\n\r\n  // Blank Color\r\n  blankColor: '#000',\r\n\r\n  // Border color\r\n  borderColor: '#000',\r\n\r\n  // Score after moving down a tetromino\r\n  scoreMoveDown: 1,\r\n\r\n  // Score after removing a row\r\n  scoreRemoveRow: 5,\r\n\r\n  // Tetrominoes\r\n  tetrominoes: [\r\n    TETROMINO_I,\r\n    TETROMINO_S,\r\n    TETROMINO_Z,\r\n    TETROMINO_T,\r\n    TETROMINO_Q,\r\n    TETROMINO_L,\r\n    TETROMINO_J,\r\n  ],\r\n  tetrominoesColor: ['#d11', '#1d1', '#11f', '#dd1', '#d1d', '#1cd', '#fdd']\r\n}\r\n\r\nexport default config;","import  Tetromino from './tetromino';\r\nimport  defaultConfig from './config';\r\n\r\nconst COLLISION_TYPE = {\r\n  LEFT: 1,\r\n  RIGHT: 2,\r\n  BOTTOM: 3,\r\n  OTHER: 4   \r\n};\r\n\r\nexport default class Tetris {\r\n  constructor(drawer, field, window = window, config = defaultConfig) {\r\n    // Events\r\n    this.onUpdateScore = () => {};\r\n    this.onGameOver = () => {};\r\n    this.onElapsedSecond = () => {};\r\n    this.onRandomTetromino = () => {};\r\n\r\n    // Properties\r\n    this.field = field;\r\n    this.drawer = drawer;\r\n    this.window = window;\r\n    this.config = config;\r\n    this.tetrominoes = config.tetrominoes;\r\n    this.score = 0;\r\n    this.elapsedSeconds = 0;\r\n    this.gameOver = false;    \r\n  }\r\n\r\n  /**\r\n   * Starts the game\r\n   */\r\n  start() {\r\n    this.score = this.elapsedSeconds = 0;\r\n    this.drawer.grid(this.config.rows, this.config.columns, this.config.blankColor, this.config.borderColor);\r\n    this.setRandomTetromino();\r\n    this.drawer.drawTetromino(this.currentTetromino);\r\n  }\r\n\r\n  /**\r\n   * Sets a random Tetromino (current and next)\r\n   */\r\n  setRandomTetromino() {\r\n    this.currentTetromino = this.nextTetromino || this.getRandomTetromino();\r\n    this.nextTetromino = this.getRandomTetromino();\r\n    this.currentTetromino.x = (this.config.columns / 2) - 1;\r\n    this.onRandomTetromino(this.nextTetromino);\r\n  }\r\n\r\n  /**\r\n   * Gets a random Tetromino\r\n   */\r\n  getRandomTetromino() {\r\n    const colors = this.config.tetrominoesColor;\r\n    const randomColor = Math.floor(Math.random() * colors.length);\r\n    const randomIndex = Math.floor(Math.random() * this.tetrominoes.length);\r\n    return new Tetromino(this.tetrominoes[randomIndex], 0, 0, colors[randomColor], this.config.borderColor);\r\n  }\r\n\r\n  /**\r\n   * Checks if there is collision either with another block or the limits\r\n   * Returns:\r\n   * 0 No collision, 1 Left collision, 2 right collision,\r\n   * 3 bottom collision, 4 another piece bottom collision \r\n   * @param {number} deltaX Delta X <0 Left, >0 Right\r\n   * @param {number} deltaY Delta Y <0 Top, >0 Bottom \r\n   */\r\n  isThereCollision(deltaX, deltaY) {\r\n    const matrix = this.currentTetromino.getCurrentMatrix();\r\n    for (let x = matrix.length  - 1; x >= 0; x--) {\r\n      for (let y = matrix.length - 1; y >= 0; y--) {\r\n        if (matrix[y][x]) {\r\n          const testX = this.currentTetromino.getX() + x + deltaX;\r\n          const testY = this.currentTetromino.getY() + y + deltaY;\r\n          if (testX < 0) return COLLISION_TYPE.LEFT;\r\n          if (testX >= this.config.columns) return COLLISION_TYPE.RIGHT;\r\n          if (testY >= this.config.rows) return COLLISION_TYPE.BOTTOM;\r\n          if (this.field.isFullBlock(testX, testY))  return COLLISION_TYPE.OTHER;\r\n        }\r\n      }\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * Sets the listeners and handles the event\r\n   */\r\n  setListeners() {\r\n    this.keyListener = this.keyListener.bind(this);\r\n    this.stepListener = this.stepListener.bind(this);\r\n    this.elapsedSecondsListener = this.elapsedSecondsListener.bind(this);\r\n    this.window.addEventListener('keydown', this.keyListener);\r\n    this.intervalId = setInterval(this.stepListener, 1000);\r\n    this.elapsedSecondsId = setInterval(this.elapsedSecondsListener, 1000);\r\n  }\r\n\r\n  /**\r\n   * Handles the timer event to move down the tetromino\r\n   */\r\n  stepListener() {\r\n    this.checkDown();\r\n  }\r\n\r\n  /**\r\n   * Handles the elapsed second timer\r\n   */\r\n  elapsedSecondsListener() {\r\n    this.elapsedSeconds++;\r\n    this.onElapsedSecond(this.elapsedSeconds);\r\n  }\r\n\r\n  /**\r\n   * Handles the direction keys events\r\n   * @param {KeyboardEvent} e Event \r\n   */\r\n  keyListener(e) {\r\n    const isArrow = [37, 38, 39, 40].indexOf(e.keyCode) !== -1;\r\n    if (!isArrow || this.currentTetromino.isLocked()) { \r\n      return false;\r\n    }\r\n    // Erase current Tetromino\r\n    this.drawer.drawTetromino(this.currentTetromino, this.config.blankColor);\r\n    // Left Key\r\n    if (e.keyCode === 37) {\r\n      if (!this.isThereCollision(-1, 0)) {\r\n        this.currentTetromino.moveLeft();\r\n      }\r\n    }\r\n    // Up Key (Rotates the Tetromino)\r\n    if (e.keyCode === 38) {\r\n      const currentRotation = this.currentTetromino.getRotation();\r\n      this.currentTetromino.rotate();\r\n      if (this.isThereCollision(0, 0)) {\r\n        this.currentTetromino.setRotation(currentRotation);\r\n      }\r\n    }\r\n    // Right Key\r\n    if (e.keyCode === 39) {\r\n      if (!this.isThereCollision(1, 0)) {\r\n        this.currentTetromino.moveRight();\r\n      }\r\n    }\r\n    // Down Key\r\n    if (e.keyCode === 40) {\r\n      this.checkDown();\r\n      return;\r\n    }\r\n    // Draws the Tetromino at the new Position / Rotation\r\n    this.drawer.drawTetromino(this.currentTetromino);\r\n  }\r\n\r\n  /**\r\n   * Process the down movement\r\n   */\r\n  checkDown() {\r\n    this.drawer.drawTetromino(this.currentTetromino, this.config.blankColor);\r\n    if (this.isThereCollision(0, 1)) {\r\n      this.drawer.drawTetromino(this.currentTetromino);\r\n      this.currentTetromino.lock();\r\n      let y = this.currentTetromino.getBottomY();\r\n      let removedRows = 0;\r\n      while (y >= this.currentTetromino.getY()) {\r\n        if (this.field.isFullRow(y)) {\r\n          removedRows++;\r\n          this.drawer.moveAllRows(y - 1, y);\r\n        } else {\r\n          y--;\r\n        }\r\n      }\r\n      this.score += this.config.scoreRemoveRow * removedRows;\r\n      this.onUpdateScore(this.score);\r\n      this.setRandomTetromino();\r\n      // Check if the game is over\r\n      if (this.isThereCollision(0, 1)) {\r\n        this.setGameOver();\r\n      }\r\n    } else {\r\n      this.score += this.config.scoreMoveDown;\r\n      this.currentTetromino.moveDown();\r\n    }\r\n    this.drawer.drawTetromino(this.currentTetromino);\r\n  }\r\n\r\n  /**\r\n   * Returns the current score\r\n   */\r\n  getScore() {\r\n    return this.score;\r\n  }\r\n\r\n  /**\r\n   * Returns the elapsed seconds since the game started\r\n   */\r\n  getElapsedSeconds() {\r\n    return this.elapsedSeconds;\r\n  }\r\n\r\n  /**\r\n   * Returns the next tetromino\r\n   */\r\n  getNextTetromino() {\r\n    return this.nextTetromino;\r\n  }\r\n\r\n  /**\r\n   * Is the game over?\r\n   */\r\n  isGameOver() {\r\n    return this.gameOver;\r\n  }\r\n\r\n  /**\r\n   * Sets the game over\r\n   */\r\n  setGameOver() {\r\n    this.window.removeEventListener('keydown', this.keyListener);\r\n    clearInterval(this.intervalId);\r\n    clearInterval(this.elapsedSecondsId);\r\n    this.gameOver = true;\r\n    this.onGameOver();\r\n  }\r\n}\r\n","import Field from './field';\r\nimport Drawer from './drawer';\r\nimport Tetris from './tetris';\r\n\r\nconst template =\r\n`<main style=\"clear:both\">\r\n  <section style=\"text-align:center;\">\r\n    <canvas id=\"_tetris\" width=\"150\" height=\"300\"></canvas>\r\n  </section>\r\n  <section id=\"_gameover\" style=\"text-align:center;\">\r\n    <button style=\"padding: 1% 2% 1% 2%;\" id=\"_newGame\">Restart</button>\r\n  </section>\r\n  <section style=\"text-align:center;padding:1% 10% 1% 10%;\">\r\n    <div style=\"padding:1%;clear:both;font-size:1em;margin-bottom:2%;overflow:hidden\">\r\n      <div style=\"float:left;\">SCORE</div>\r\n      <div style=\"float:right;\" id=\"_score\">0</div>\r\n    </div>\r\n    <div style=\"padding:1%;clear:both;font-size:1em;margin-bottom:2%;overflow:hidden;\">\r\n      <div style=\"float:left;\">TIME</div>\r\n      <div style=\"float:right;\" id=\"_time\">0</div>\r\n    </div>\r\n    <div style=\"clear:both;font-size:1em;overflow:hidden;\">\r\n      <canvas style=\"margin-top:1%;\" id=\"_nextPiece\" width=\"60\" height=\"30\"></canvas>\r\n    </div>\r\n  </section>\r\n</main>`;\r\n\r\nexport default class TetrisBuilder {\r\n  constructor(container, config) {\r\n    container.innerHTML = template;\r\n    this.container = container;\r\n    this.config = config;\r\n    this.scoreElement = document.getElementById('_score');\r\n    this.timeElement = document.getElementById('_time');\r\n    this.field = new Field(this.config.rows, this.config.columns);\r\n    this.drawer = new Drawer(document.getElementById('_tetris'), this.field, this.config.blockSize, this.config.blankColor);\r\n    this.tetris = new Tetris(this.drawer, this.field, window, this.config);\r\n    this.fieldNextPiece = new Field(5, 5);\r\n    this.drawerNextPiece = new Drawer(document.getElementById('_nextPiece'), this.fieldNextPiece, 15, this.config.blankColor);\r\n    this.tetris.onGameOver = this.onGameOver.bind(this);\r\n    this.tetris.onElapsedSecond = this.onElapsedSecond.bind(this);\r\n    this.tetris.onRandomTetromino = this.onRandomTetromino.bind(this);\r\n    this.newGame = this.newGame.bind(this);\r\n    this.destroyGame = this.destroyGame.bind(this);\r\n    document.getElementById('_newGame').addEventListener('click', this.newGame);\r\n    this.tetris.onUpdateScore = (score) => {\r\n      this.scoreElement.innerText = score;\r\n    };   \r\n  }\r\n\r\n  onGameOver() {\r\n  }\r\n\r\n  onElapsedSecond(totalSeconds) {\r\n    this.timeElement.innerText = totalSeconds;\r\n  }\r\n\r\n  onRandomTetromino(tetromino) {\r\n    this.drawerNextPiece.reset();\r\n    this.drawerNextPiece.drawTetromino(tetromino);  \r\n  }\r\n\r\n  newGame() {\r\n    this.tetris.setGameOver();\r\n    this.scoreElement.innerText = this.timeElement.innerText = 0;\r\n    this.tetris.start();\r\n    this.tetris.setListeners();\r\n  }\r\n  \r\n  destroyGame() {\r\n    this.tetris.setGameOver();\r\n    this.container.innerHTML = '';\r\n  }  \r\n}\r\n\r\n","import React, { useRef, useEffect } from 'react';\r\nimport TetrisBuilder from '../../lib/tetris/tetrisbuilder';\r\nimport tetrisConfig from '../../lib/tetris/config';\r\nimport './Tetris.css';\r\n\r\nexport default function Tetris() {\r\n  const tetrisRef = useRef();\r\n  useEffect(() => {\r\n    const tetris = new TetrisBuilder(tetrisRef.current, tetrisConfig);\r\n    tetris.newGame();\r\n    return function destroyTetris() {\r\n      tetris.destroyGame();\r\n    }\r\n  });\r\n\r\n  return (\r\n    <div className=\"tetris\">\r\n      <div ref={tetrisRef}></div>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport MsgBox from '../dos/msgbox/MsgBox';\r\nimport Tetris from '../tetris/Tetris';\r\n\r\nexport default function TetrisDialog(props) {\r\n  console.log('Rendering Tetris');\r\n  return (\r\n    <div className=\"tetris\">\r\n      <MsgBox title=\"tetris\" width=\"220px\" onButtonClick={props.onButtonClick}>\r\n        <Tetris></Tetris>\r\n      </MsgBox>\r\n    </div>\r\n  );\r\n}","import React, { useState } from 'react';\r\nimport Menu from  './components/dos/menu/Menu';\r\nimport MenuItem from './components/dos/menu/MenuItem';\r\nimport MenuPopup from './components/dos/menu/MenuPopup';\r\nimport MenuPopupItem from './components/dos/menu/MenuPopupItem';\r\nimport MenuPopupItemLink from './components/dos/menu/MenuPopupItemLink';\r\nimport Clock from './components/dos/clock/Clock';\r\nimport AboutDialog from './components/dialogs/AboutDialog';\r\nimport ProjectsDialog from './components/dialogs/ProjectsDialog';\r\nimport TetrisDialog from './components/dialogs/TetrisDialog';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  const [currentDialog, setCurrentDialog] = useState('tetris');\r\n\r\n  const closeDialog = () => setCurrentDialog('');\r\n\r\n  const getCurrentDialog = (id) =>  {\r\n    if (id === 'about') {\r\n      return <AboutDialog onButtonClick={closeDialog} />;\r\n    } else if (id === 'projects') {\r\n      return <ProjectsDialog onButtonClick={closeDialog} />;\r\n    } else if (id === 'tetris') {\r\n      return <TetrisDialog onButtonClick={closeDialog} />;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div className=\"fh\">\r\n      <Menu>\r\n        <MenuItem icon=\"fa fa-bars\">\r\n          <MenuPopup>\r\n            <MenuPopupItem id=\"tetris\" label=\"Play Tetris\" onItemClick={() => setCurrentDialog('tetris')} />\r\n          </MenuPopup>\r\n        </MenuItem>\r\n        <MenuItem label=\"File\">\r\n          <MenuPopup>\r\n            <MenuPopupItem id=\"about\" label=\"About Me\" onItemClick={() => setCurrentDialog('about')} />\r\n            <MenuPopupItem id=\"projects\" label=\"Side projects\" onItemClick={() => setCurrentDialog('projects')} />\r\n          </MenuPopup>\r\n        </MenuItem>\r\n        <MenuItem label=\"Social\">\r\n          <MenuPopup>\r\n            <MenuPopupItemLink label=\"Github\" link=\"https://github.com/nullxor\" icon=\"fa-github\" />\r\n            <MenuPopupItemLink label=\"LinkedIn\" link=\"https://www.linkedin.com/in/olfran/\" icon=\"fa-linkedin\" />\r\n            <MenuPopupItemLink label=\"Twitter\" link=\"https://twitter.com/nullxor\" icon=\"fa-twitter\" />\r\n          </MenuPopup>\r\n        </MenuItem>\r\n        <MenuItem placeholder=\"true\">\r\n          <Clock />\r\n        </MenuItem>\r\n      </Menu>\r\n      {getCurrentDialog(currentDialog)}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}